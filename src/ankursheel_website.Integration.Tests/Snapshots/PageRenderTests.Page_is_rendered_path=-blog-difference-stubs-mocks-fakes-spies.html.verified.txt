<!DOCTYPE html><html lang="en" class="min-h-screen"><head>
    

<title>Stubs vs Mocks vs Fakes vs Spy</title>
<meta charset="utf-8">


<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="We can use Mocks for almost everything when we use a mocking framework, but what is the difference between Stubs, Mocks, Fakes and Spies">
<link href="/assets/styles.css" rel="stylesheet">
<link href="/assets/code-styles/obsidian.min.css" rel="stylesheet">
    <link rel="canonical" href="https://www.ankursheel.com/blog/difference-stubs-mocks-fakes-spies">   
<meta itemprop="name" content="Stubs vs Mocks vs Fakes vs Spy">
<meta itemprop="description" content="We can use Mocks for almost everything when we use a mocking framework, but what is the difference between Stubs, Mocks, Fakes and Spies">
    <meta itemprop="image" content="https://www.ankursheel.com/assets/images/social/difference-stubs-mocks-fakes-spies-facebook.png">
<meta property="og:url" content="https://www.ankursheel.com/blog/difference-stubs-mocks-fakes-spies">
<meta property="og:type" content="article">
<meta property="og:title" content="Stubs vs Mocks vs Fakes vs Spy">
<meta property="og:description" content="We can use Mocks for almost everything when we use a mocking framework, but what is the difference between Stubs, Mocks, Fakes and Spies">
    <meta property="og:image" content="https://www.ankursheel.com/assets/images/social/difference-stubs-mocks-fakes-spies-facebook.png">
    <meta property="og:image:secure_url" content="https://www.ankursheel.com/assets/images/social/difference-stubs-mocks-fakes-spies-facebook.png">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="ankur_sheel">
<meta name="twitter:creator" content="ankur_sheel">
<meta name="twitter:title" content="Stubs vs Mocks vs Fakes vs Spy">
<meta name="twitter:description" content="We can use Mocks for almost everything when we use a mocking framework, but what is the difference between Stubs, Mocks, Fakes and Spies">
    <meta name="twitter:image" content="https://www.ankursheel.com/assets/images/social/difference-stubs-mocks-fakes-spies-twitter.png">
    <meta name="twitter:image:secure_url" content="https://www.ankursheel.com/assets/images/social/difference-stubs-mocks-fakes-spies-twitter.png">

</head>
<body class="font-sans font-normal leading-relaxed font-base text-gray-800 min-h-screen bg-gray-100">
<noscript>
        <img src="https://ankursheel.goatcounter.com/count?p=/test-noscript">
</noscript>

<header class="sticky top-0 bg-white shadow-lg z-10 w-full">
    
<nav x-data="{ open: false }" class="flex flex-col max-w-screen-xl px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-6 md:px-8">
    <div class="flex flex-col items-start">
        <div class="flex flex-row items-center justify-between font-semibold w-full">
            <a href="/" class="navigation-link text-lg hover:invert-0 text-gray-900 uppercase rounded-lg focus:outline-none">Ankur Sheel</a>
            <button class="md:hidden rounded-lg focus:outline-none focus:shadow-outline" x-on:click="open = !open">
                <svg fill="currentColor" viewBox="0 0 20 20" class="w-6 h-6">
                    <path x-show="!open" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                    <path x-show="open" fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
        <div class="pb-4 flex items-center">
            
<div class="flex">
    <a class="" href="https://twitter.com/ankur_sheel" title="Connect on Twitter" target="_blank" rel="noopener noreferrer">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-4">
            <path fill="currentColor" fill-rule="evenodd" d="M7.233 4.696c0-1.727 1.4-3.127 3.127-3.127 1.014 0 1.823.479 2.365 1.175a5.246 5.246 0 0 0 1.626-.629 2.634 2.634 0 0 1-1.148 1.45l.002.003a5.26 5.26 0 0 0 1.5-.413l-.001.002c-.337.505-.76.95-1.248 1.313.026.177.04.354.04.53 0 3.687-2.809 7.975-7.975 7.975a7.93 7.93 0 0 1-4.296-1.26.5.5 0 0 1-.108-.748.45.45 0 0 1 .438-.215c.916.108 1.83-.004 2.637-.356a3.086 3.086 0 0 1-1.69-1.876.45.45 0 0 1 .103-.448 3.07 3.07 0 0 1-1.045-2.31v-.034a.45.45 0 0 1 .365-.442 3.068 3.068 0 0 1-.344-1.416c0-.468.003-1.058.332-1.59a.45.45 0 0 1 .323-.208.5.5 0 0 1 .538.161 6.964 6.964 0 0 0 4.46 2.507v-.044Zm-1.712 7.279a6.936 6.936 0 0 1-2.249-.373 5.318 5.318 0 0 0 2.39-1.042.45.45 0 0 0-.27-.804 2.174 2.174 0 0 1-1.714-.888c.19-.015.376-.048.556-.096a.45.45 0 0 0-.028-.876 2.18 2.18 0 0 1-1.644-1.474c.2.048.409.077.623.084a.45.45 0 0 0 .265-.824 2.177 2.177 0 0 1-.97-1.812c0-.168.003-.317.013-.453a7.95 7.95 0 0 0 5.282 2.376.5.5 0 0 0 .513-.61 2.127 2.127 0 0 1 2.071-2.614c1.234 0 2.136 1.143 2.136 2.432 0 3.256-2.476 6.974-6.975 6.974Z" clip-rule="evenodd"></path>
        </svg>
    </a>
    <a class="ml-4" href="https://www.linkedin.com/in/ankursheel" title="View my LinkedIn profile" target="_blank" rel="noopener noreferrer">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-4">
            <path fill="currentColor" d="M4.98 3.5C4.98 4.881 3.87 6 2.5 6S.02 4.881.02 3.5C.02 2.12 1.13 1 2.5 1s2.48 1.12 2.48 2.5zM5 8H0v16h5V8zm7.982 0H8.014v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0V24H24V13.869c0-7.88-8.922-7.593-11.018-3.714V8z"></path>
        </svg>
    </a>

    <a class="ml-4" href="https://github.com/AnkurSheel" title="Check out my work on Github" target="_blank" rel="noopener noreferrer">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-4">
            <path fill="currentColor" fill-rule="evenodd" d="M7.5.85a6.65 6.65 0 0 0-2.102 12.96c.332.061.454-.144.454-.32 0-.159-.006-.576-.01-1.131-1.849.401-2.24-.892-2.24-.892-.302-.768-.738-.973-.738-.973-.604-.412.046-.404.046-.404.667.047 1.018.685 1.018.685.594 1.017 1.557.723 1.936.553.06-.43.232-.723.422-.889-1.477-.168-3.029-.738-3.029-3.287 0-.726.26-1.319.685-1.784-.069-.168-.297-.844.065-1.76 0 0 .558-.179 1.828.681A6.41 6.41 0 0 1 7.5 4.066a6.394 6.394 0 0 1 1.665.223c1.27-.86 1.827-.68 1.827-.68.363.915.135 1.59.066 1.759.427.465.684 1.058.684 1.784 0 2.555-1.555 3.117-3.036 3.282.238.205.45.611.45 1.232 0 .888-.007 1.605-.007 1.823 0 .178.12.385.457.32A6.652 6.652 0 0 0 7.499.85Z" clip-rule="evenodd"></path>
        </svg>
    </a>


    <a class="ml-4" target="_blank" rel="noopener noreferrer" href="/rss.xml" title="RSS">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="h-4">
            <path d="M6.503 20.752A3.25 3.25 0 0 1 3.252 24 3.25 3.25 0 0 1 0 20.752a3.25 3.25 0 0 1 3.252-3.248 3.25 3.25 0 0 1 3.251 3.248zM0 8.18v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817C15.777 15.29 8.721 8.242 0 8.18zm0-3.368C10.58 4.858 19.152 13.406 19.183 24H24C23.97 10.769 13.245.046 0 0v4.812z" fill="currentColor"></path>
        </svg>
    </a>
</div>

        </div>
    </div>
    <ul :class="{'flex': open, 'hidden': !open}" class="flex-col flex-grow pb-4 items-center md:pb-0 hidden md:flex md:justify-end md:flex-row">
        

    <li class="navigation-link">
            <div x-on:click.away="open = false" class="relative" x-data="{ open: false }">
                <button x-on:click="open = !open" class="flex flex-row items-center w-full text-left bg-transparent font-semibold md:w-auto md:inline md:ml-4 hover:text-gray-900">
                    <span>About</span>
                    <svg fill="currentColor" viewBox="0 0 20 20" :class="{'rotate-180': open, 'rotate-0': !open}" class="inline w-4 h-4 mt-1 ml-1 transition-transform duration-200 transform md:-mt-1">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
                <div x-show="open" x-transition:enter="transition ease-out duration-100" x-transition:enter-start="transform opacity-0 scale-95" x-transition:enter-end="transform opacity-100 scale-100" x-transition:leave="transition ease-in duration-75" x-transition:leave-start="transform opacity-100 scale-100" x-transition:leave-end="transform opacity-0 scale-95" class="absolute right-0 w-full mt-2 origin-top-right rounded-md shadow-lg md:w-48">
                    <div class="px-2 py-2 bg-white rounded-md shadow">
                                    <a class="block hover:invert-0 navigation-link" href="/about">About</a>
                                    <a class="block hover:invert-0 navigation-link" href="/impossible-list">Impossible List</a>
                                    <a class="block hover:invert-0 navigation-link" href="https://www.discoveriesinbookland.com/" target="_blank">Book Summaries</a>
                    </div>
                </div>
            </div>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/blog">Blog</a>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/tags">Tags</a>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/cv">CV</a>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/contact">Contact</a>
    </li>

    </ul>
</nav>

</header>

<main class="mx-auto max-w-prose p-4 prose prose-xl prose-purple">
    <h1 class="text-center">Stubs vs Mocks vs Fakes vs Spy</h1>
    <div class="flex flex-col min-h-screen">
        <article class="prose-code:bg-slate-400">
            

<div class="prose-sm italic">
    <div class="flex flex-col sm:flex-row justify-evenly items-center text-sm gap-y-1">
        <span class="mr-4 sm:py-0 py-1">Published on <time datetime="2021-07-15">Jul 15, 2021</time></span>
        <span class="mr-4 sm:py-0 py-1">Last Updated on <time datetime="2022-08-08">Aug 08, 2022</time></span>
        <span class="sm:py-0 py-1">
            Estimated Reading Time: <span class="font-bold">3 min</span>
        </span>
    </div>

    <div class="flex flex-row flex-wrap gap-1 place-content-center">
            <a href="/tags/testing" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">testing</a>
    </div>
</div>

<p>The lines between the different test doubles are blurred when using a Mocking library like <a href="https://github.com/moq/moq4">Moq</a>.</p>
<p>I use mocks for almost everything, but knowing the difference between Stubs, Mocks, Fakes, and Spies is worthwhile. If nothing else, we will know what people are talking about when they use the different terms.</p>
<p>Before we look at all the different test doubles, let's look at the interface we are mocking for the examples.</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IRepository</span>
{
     <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsValid</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span>;
     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id, <span class="hljs-built_in">bool</span> valid</span>)</span>;
}
</code></pre>
<h2 id="stub">Stub</h2>
<p>A stub is an object that provides (canned) hardcoded values to method calls. It always returns the same output regardless of the input.</p>
<p>Below is the stubbed version using Moq of a service where the OnPing() function always returns &quot;pong&quot; regardless of the input.</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">var</span> mock = <span class="hljs-keyword">new</span> Mock&lt;IRepository&gt;();
mock.Setup(x =&gt; x.IsValid(It.IsAny&lt;<span class="hljs-built_in">int</span>&gt;())).Returns(<span class="hljs-literal">true</span>);
</code></pre>
<p>An example can be an object that needs to grab some data from the database to respond to a method call. Instead of the actual object, we can introduce a stub and define what data should be returned.</p>
<h2 id="spy">Spy</h2>
<p>A spy lets us verify what functions were called, with what arguments, when, and how often.</p>
<p>For example, let's take a repository class which does not have an interface associated with it.</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RepositorySpy</span> : <span class="hljs-title">IRepository</span>
{
    <span class="hljs-keyword">public</span> boolean IsValidWasCalled = <span class="hljs-literal">false</span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-built_in">bool</span> <span class="hljs-title">IsValid</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span>
    {
        IsValidWasCalled = <span class="hljs-literal">true</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
}
</code></pre>
<p>In the test, we will assert that <code>IsValidWasCalled</code> was <em>true</em>.</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">var</span> spy = <span class="hljs-keyword">new</span> RepositorySpy();
Assert.True(spy.IsValidWasCalled);
</code></pre>
<p>We should use spies where we don't care about the return values of functions but want to verify what functions were called, with what arguments, when, and how often.</p>
<p>An example would be checking that we send an email only once with the correct arguments or that all the logs are logged correctly.</p>
<p>I rarely use Spies, and it will become clear why once we look at Mocks.</p>
<h2 id="mock">Mock</h2>
<p>A mock is similar to a stub, but the behaviour of the mocked interface can be changed dynamically based on scenarios. It is also similar to a spy as it allows us to verify that a method was called. However, the assertion is in the verify method in a mock. In a spy, the assertion is in the test,</p>
<p>Below is the mocked version using Moq of a service where the IsValid() function behaves differently for different inputs. We also verified that the correct calls were received.</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">var</span> mock = <span class="hljs-keyword">new</span> Mock&lt;IRepository&gt;();
mock.Setup(x =&gt; x.IsValid(<span class="hljs-number">1</span>)).Returns(<span class="hljs-literal">true</span>);
mock.Setup(x =&gt; x.IsValid(<span class="hljs-number">2</span>)).Returns(<span class="hljs-literal">false</span>);
mock.Verify(x =&gt; x.Add(<span class="hljs-number">1</span>), Times.Once);
mock.Verify(x =&gt; x.IsValid(It.IsAny&lt;<span class="hljs-built_in">int</span>&gt;())), Times(<span class="hljs-number">2</span>));
</code></pre>
<p>A mock can be used anywhere we use a stub, but we need to verify multiple more specific behaviours.</p>
<h2 id="fake">Fake</h2>
<p>A Fake is an object with a concrete implementation that works similarly to the actual implementation. It is a simplified version of production code. It does not affect the test's behaviour but simplifies the test's implementation by removing heavyweight dependencies.</p>
<p>It should be used sparingly and only in cases where a Stub or Mock is not usable.</p>
<p>Below is an implementation of a Fake repository</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FakeRepository</span> : <span class="hljs-title">IRepository</span>
{
    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">bool</span>&gt; _values = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">bool</span>&gt;();

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsValid</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span>
    {
        <span class="hljs-keyword">return</span> _values[id];
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id, <span class="hljs-built_in">bool</span> valid</span>)</span>
    {
        _values.Add(id, open);
    }
}
</code></pre>
<p>An example could be using AWS S3 in production but adding a fake that saves files to disk for testing purposes.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Hopefully, now, you understand the difference between the test doubles and are not confused when people talk about fakes, stubs or mocks.</p>
<h3 id="thanks">Thanks</h3>
<ul>
<li>Aamir Mulla for suggesting that a code sample to the Spy section would be helpful.</li>
</ul>




<aside class="m-2">
    <div class="my-6 flex justify-center gap-5 flex-wrap">
        <a class="bg-social-twitter social-button" href="https://twitter.com/intent/tweet?url=https://www.ankursheel.com/blog/difference-stubs-mocks-fakes-spies&amp;text=Stubs%20vs%20Mocks%20vs%20Fakes%20vs%20Spy via @ankur_sheel.&amp;#xD;&amp;#xA;We%20can%20use%20Mocks%20for%20almost%20everything%20when%20we%20use%20a%20mocking%20framework%2C%20but%20what%20is%20the%20difference%20between%20Stubs%2C%20Mocks%2C%20Fakes%20and%20Spies" onclick="window.open(this.href, 'twitter-share', 'width=550,height=235'); return false;">Share on Twitter</a>
        <a class="bg-social-linkedin social-button" href="https://www.linkedin.com/sharing/share-offsite/?url=https://www.ankursheel.com/blog/difference-stubs-mocks-fakes-spies" target="_blank" rel="noopener noreferrer">Share on Linkedin</a>
    </div>
</aside>




<aside class="border-t-2 mt-2 p-4 rounded-lg shadow-sm">
    <h2 class="mt-2 text-center">You might also like</h2>

    <ul>
            <li>
                <a href="better-naming-convention-unit-tests">A better naming convention for unit tests</a>
            </li>
            <li>
                <a href="load-test-data-json-file-xunit-tests">How to load test data from a JSON file for xUnit tests</a>
            </li>
            <li>
                <a href="automatically-set-access-token-authenticated-requests-insomnia">How to automatically set the access token in Insomnia</a>
            </li>
            <li>
                <a href="verifying-method-calls-class-mockito-spies">Verifying Method Calls within a class using Mockito Spies</a>
            </li>
    </ul>
</aside>


<aside class="border-t-2 mt-2 p-4 rounded-lg shadow-sm">
    <form action="https://ankursheel.us12.list-manage.com/subscribe/post?u=d88459c290a1a8d98ad780bbc&amp;amp;id=31e4ebb75b" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
        <div id="mc_embed_signup_scroll">
            <p class="mt-2 text-2xl font-bold text-center">Want to know when a new post comes out?</p>
            <div class="flex gap-4 items-center justify-center flex-wrap">
                <input class="rounded-md border-gray-300 focus:border-gray-500 focus:ring-0 required" aria-label="First Name" name="FNAME" required="" placeholder="First Name" type="text" id="mce-FNAME">
                <input class="rounded-md border-gray-300 focus:border-gray-500 focus:ring-0 required email" name="EMAIL" aria-label="Email Address" placeholder="Email Address" required="" type="email" id="mce-EMAIL">
                <button class="px-3 py-2 text-white bg-green-400 rounded-md focus:bg-indigo-600 focus:outline-none flex-none" type="submit">Subscribe</button>
                <input type="checkbox" class="hidden" value="1" name="group[52461][1]" id="mce-group[52461]-52461-0" checked="">
                <div style="position: absolute; left: -5000px;" aria-hidden="true">
                    <input type="text" name="b_d88459c290a1a8d98ad780bbc_31e4ebb75b" tabindex="-1" value="">
                </div>
                <div>
                    <a href="http://eepurl.com/hRcTAL" title="Mailchimp - email marketing made easy and fun">
                        <img src="https://eep.io/mc-cdn-images/template_images/branding_logo_text_dark_dtp.svg">
                    </a>
                </div>
            </div>
        </div>
    </form>
</aside>


<footer>
    <script src="https://giscus.app/client.js" data-repo="AnkurSheel/blog-comments" data-repo-id="R_kgDOIAUZqA" data-category="Announcements" data-category-id="DIC_kwDOIAUZqM4CRdIF" data-mapping="pathname" data-strict="1" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="preferred_color_scheme" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
    </script>

</footer>

        </article>
    </div>
</main>



<script src="/assets/js/blog.js" defer=""></script>
<script src="https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js" defer=""></script>
    <script data-goatcounter="https://ankursheel.goatcounter.com/count" src="/assets/js/gc-count.js"></script>


<script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="ankursheel" data-description="Support me on Buy me a coffee!" data-message="Did you learn something? Buy me a coffee" data-color="#FF813F" data-position="Right" data-x_margin="18" data-y_margin="18" defer="">
</script>




</body></html>