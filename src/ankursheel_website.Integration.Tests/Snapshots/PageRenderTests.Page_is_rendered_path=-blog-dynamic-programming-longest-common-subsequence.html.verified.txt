
<!DOCTYPE html>
<html lang="en" class="min-h-screen">
<head>
    

<title>Ankur Sheel - Solve Longest Common Subsequence with Dynamic Programming</title>
<meta charset="utf-8"/>

<!-- Google Tag Manager -->
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MG9PGWH');</script>
    <!-- End Google Tag Manager -->

<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content="In this article, we will use the above steps to arrive at a Dynamic Programming solution to the Longest Common Subsequence problem."/>
<link href="/assets/styles.css" rel="stylesheet"/>
<link href="/assets/code-styles/obsidian.min.css" rel="stylesheet"/>
<link rel="canonical" href="https://www.ankursheel.com/blog/dynamic-programming-longest-common-subsequence"/>

<meta itemProp="name" content="Solve Longest Common Subsequence with Dynamic Programming"/>
<meta itemProp="description" content="In this article, we will use the above steps to arrive at a Dynamic Programming solution to the Longest Common Subsequence problem."/>
    <meta itemProp="image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-longest-common-subsequence-facebook.png"/>
<meta property="og:url" content="https://www.ankursheel.com/blog/dynamic-programming-longest-common-subsequence"/>
<meta property="og:type" content="article"/>
<meta property="og:title" content="Solve Longest Common Subsequence with Dynamic Programming"/>
<meta property="og:description" content="In this article, we will use the above steps to arrive at a Dynamic Programming solution to the Longest Common Subsequence problem."/>
    <meta property="og:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-longest-common-subsequence-facebook.png"/>
    <meta property="og:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-longest-common-subsequence-facebook.png"/>
<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:site" content="ankur_sheel"/>
<meta name="twitter:creator" content="ankur_sheel"/>
<meta name="twitter:title" content="Solve Longest Common Subsequence with Dynamic Programming"/>
<meta name="twitter:description" content="In this article, we will use the above steps to arrive at a Dynamic Programming solution to the Longest Common Subsequence problem."/>
    <meta name="twitter:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-longest-common-subsequence-twitter.png"/>
    <meta name="twitter:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-longest-common-subsequence-twitter.png"/>

</head>
<body class="font-sans font-normal leading-relaxed font-base text-gray-800 min-h-screen bg-gray-100">
    <!-- Google Tag Manager (noscript) -->
    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MG9PGWH"
                height="0" width="0" style="display:none;visibility:hidden">
        </iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
<header class="sticky top-0 bg-white shadow-lg z-10 w-full">
    

<!-- https://www.section.io/engineering-education/creating-a-responsive-navigation-bar-using-tailwind-css-and-javascript/ -->

<nav class="text-gray-500 font-semibold">
    <div class="max-w-6xl mx-auto px-4">
        <div class="flex justify-between">
            <div class="flex space-x-7 items-center  ">
                <!-- Website Logo -->
                <div>
                    <a href="/" class="flex items-center py-4 px-2 ">
                            Ankur Sheel
                    </a>
                </div>
                <ul class="hidden lg:flex items-center space-x-1">
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/about">About</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/blog">All Posts</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/tags">All Tags</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/contact">Contact</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/cv">CV</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/impossible-list">Impossible List</a>
                        </li>
                </ul>
            </div>

            <ul class="hidden lg:flex items-center space-x-3">
                <li>
                    <a role="button" class="" target="_blank" rel="noopener noreferrer" href="/rss.xml" title="RSS">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="h-6">
                          <path d="M6.503 20.752A3.25 3.25 0 0 1 3.252 24 3.25 3.25 0 0 1 0 20.752a3.25 3.25 0 0 1 3.252-3.248 3.25 3.25 0 0 1 3.251 3.248zM0 8.18v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817C15.777 15.29 8.721 8.242 0 8.18zm0-3.368C10.58 4.858 19.152 13.406 19.183 24H24C23.97 10.769 13.245.046 0 0v4.812z" fill="currentColor"/>
                        </svg>

                    </a>
                </li>
                <li>
                    <a role="button" class="inline-flex items-center bg-green-400 text-white p-2 rounded-md text-2xl drop-shadow-lg hover:bg-green-800" target="_blank" rel="noopener noreferrer" href="https://www.buymeacoffee.com/ankursheel" title="Did you learn something or find this summary interesting?">
                        <img class="h-8 mr-2 border-none" src="/assets/images/bmc-logo.svg" alt="Buy Me A Coffee">
                        <p class="font-cookie">Buy me a coffee</p>
                    </a>
                </li>
            </ul>

            <div class="lg:hidden flex items-center">
                <button class="outline-none mobile-menu-button" aria-label="Mobile Menu">
                    <svg class="h-6 w-6 fill-current" viewBox="0 0 24 24">
                        <path fill-rule="evenodd"
                              d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"/>
                    </svg>
                </button>
            </div>

        </div>
        <div class="hidden mobile-menu">
            <ul class="flex flex-col">
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/about" class="block">About</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/blog" class="block">All Posts</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/tags" class="block">All Tags</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/contact" class="block">Contact</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/cv" class="block">CV</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/impossible-list" class="block">Impossible List</a>
                    </li>
            </ul>
        </div>
    </div>
</nav>

</header>

<main class="mx-auto max-w-prose p-4 prose prose-xl prose-purple">
    <h1 class="text-center">Solve Longest Common Subsequence with Dynamic Programming</h1>
    <div class="flex flex-col min-h-screen">
        <article class="prose-code:bg-slate-400">
            
<div class="prose-sm italic ">
    <div class="flex justify-evenly items-center">
        <time datetime="2017-04-09">April 09, 2017</time>
        <i class="font-bold">
            Reading Time: 5 min
        </i>
    </div>

    <div class="flex flex-row flex-wrap gap-1 place-content-center">
            <a href="/tags/cpp" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">cpp</a>
            <a href="/tags/dynamic-programming" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">dynamic programming</a>
            <a href="/tags/tutorial" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">tutorial</a>
    </div>
</div>

<html><head></head><body><p>In this article, we will use the steps mentioned in the <a href="/blog/dynamic-programming-series-introduction">introduction article</a> to arrive at a Dynamic Programming solution to the Longest Common Subsequence problem.</p>
<h2 id="longest-common-subsequence-lcs">Longest Common Subsequence (LCS)</h2>
<p><strong>Problem Statement:</strong> Given two sequences, find the length of the longest subsequence present in both of them. A subsequence is a sequence that appears in the same relative order but is not necessarily contiguous.</p>
<p><strong>Examples:</strong></p>
<ol>
<li>LCS for input sequences &quot;ABCDGH&quot; and &quot;AEDFHR&quot; is &quot;ADH&quot;.</li>
<li>LCS for input sequences &quot;HUMAN&quot; and &quot;CHIMPANZEE&quot; is &quot;HMAN&quot;.</li>
</ol>
<p>The longest common subsequence is used to solve problems such as</p>
<ul>
<li>computing how similar two DNA sequences are; and</li>
<li>comparing two different versions of the same file.</li>
</ul>
<p>You can read more about the Longest Common Subsequence <a href="https://en.wikipedia.org/wiki/Longest_common_subsequence_problem">here</a>.</p>
<h2 id="profiling">Profiling</h2>
<p>As mentioned in the <a href="/blog/dynamic-programming-series-introduction">introduction article</a>, we will be using <a href="https://github.com/google/benchmark">google benchmark</a> to help profile our solutions.</p>
<p><em>If you want to know more about how we will be using google benchmark, you can read the <a href="/blog/dynamic-programming-series-introduction">introduction article</a>.</em></p>
<p>For the LCS problem, the worst case occurs when there is no match between the sequences.</p>
<p>For the purposes of this article, we will profile against the worst case by creating 2 strings of length <em><strong>n</strong></em> and filling one of them with <em><strong>'a'</strong></em> and the other with <em><strong>'b'</strong></em>. We will then attempt to see how long it takes for the function to return. <em><strong>n</strong></em> will be part of the Benchmark name.</p>
<p>If you want to see the benchmarks in action, you can find the code <a href="https://github.com/AnkurSheel/DynamicProgramming">here</a>.</p>
<h2 id="steps">Steps</h2>
<p>In the <a href="/blog/dynamic-programming-series-introduction">introduction article</a>, we came up with the following steps to find a dynamic programming approach to our problem</p>
<ol>
<li>Find the overlapping subproblem.</li>
<li>Start with a recursive solution</li>
<li>Modify the recursive solution to use a top-down memoized version.</li>
<li>Remove the recursion by making it an iterative solution.</li>
<li>If you don't need to keep all the previous results, keep only the required ones.</li>
</ol>
<h3 id="overlapping-subproblem">Overlapping Subproblem</h3>
<p>Let the 2 strings be <strong>X</strong> of length <em><strong>m</strong></em> and <strong>Y</strong> of length <em><strong>n</strong></em></p>
<p>Let <strong>LCS(i,j)</strong> be the length of the LCS. Then we can formalise the problem as follows</p>
<pre><code class="language-ini hljs">LCS(i,j) = 0 if X[i] = '\0' || Y[j] = '\0'
LCS(i,j) = 1 + LCS(i+1, j+1) if X[i] = Y[j]
LCS(i,j) = max(LCS(i+1, j), LCS(i, j+1) if X[i] != Y[j]
</code></pre>
<p>The length of the longest common subsequence will be <strong>LCS(0,0)</strong>.</p>
<h3 id="naive-recursive-approach">Naive Recursive Approach</h3>
<p>The above formalisation can easily be translated into the following recursive method.</p>
<pre><code class="language-cpp hljs"><span class="hljs-keyword">int</span> cLCS::Recursive(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> first, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> second)
{
    <span class="hljs-keyword">if</span> (*first == <span class="hljs-string">'\0'</span> || *second == <span class="hljs-string">'\0'</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (*first == *second)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + Recursive(first + <span class="hljs-number">1</span>, second + <span class="hljs-number">1</span>);
    }
    <span class="hljs-keyword">return</span> max(Recursive(first + <span class="hljs-number">1</span>, second), Recursive(first, second + <span class="hljs-number">1</span>));
}
</code></pre>
<p>In the recursive approach, it is tough to get the actual LCS string, so we are just going to return the length of the LCS.</p>
<h3 id="top-down-recursive-approach-with-memoization">Top-Down Recursive approach with Memoization</h3>
<p>LCS subproblems consist of a pair of suffixes of the 2 input strings.</p>
<p>To store and look up the subproblem solutions, we can use a 2d array.</p>
<p>We will use a <em><strong>-1</strong></em> to tell the algorithm that nothing has been stored yet.</p>
<pre><code class="language-cpp hljs"><span class="hljs-built_in">string</span> cLCS::Memonized(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; first, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; second)
{
    <span class="hljs-keyword">int</span> length1 = first.length();
    <span class="hljs-keyword">int</span> length2 = second.length();
    <span class="hljs-keyword">if</span> (length1 == <span class="hljs-number">0</span> || length2 == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> &quot;&quot;;
    }
    Memonized(first.data(), second.data(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> GetText(first, second);
}

<span class="hljs-keyword">int</span> cLCS::Memonized(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> first, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> second, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)
{
    <span class="hljs-keyword">if</span> (m_results[GetIndex(i, j)] == <span class="hljs-number">-1</span>)
    {
        <span class="hljs-keyword">if</span> (first[i] == <span class="hljs-string">'\0'</span> || second[j] == <span class="hljs-string">'\0'</span>)
        {
            m_results[GetIndex(i, j)] = <span class="hljs-number">0</span>;
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first[i] == second[j])
        {
            m_results[GetIndex(i, j)] = <span class="hljs-number">1</span> + Memonized(first, second, i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>);
        }
        <span class="hljs-keyword">else</span>
        {
            <span class="hljs-keyword">int</span> val1 = Memonized(first, second, i + <span class="hljs-number">1</span>, j);
            <span class="hljs-keyword">int</span> val2 = Memonized(first, second, i, j + <span class="hljs-number">1</span>);
            m_results[GetIndex(i, j)] = max(val1, val2);
        }
    }
    <span class="hljs-keyword">return</span> m_results[GetIndex(i, j)];
}
</code></pre>
<p>In the above algorithm, <em><strong>m_results(0)</strong></em>, gives the length of the LCS.</p>
<p>We will look at <em><strong>GetText()</strong></em> in the next section to see how we can get the subsequence after computing the <em><strong>m_results</strong></em> array.</p>
<h3 id="getting-the-subsequence">Getting the subsequence</h3>
<p>Once we have filled in the <strong><em>m_results</em></strong> array, we can find the sequence by traversing forwards through the array.</p>
<pre><code class="language-cpp hljs"><span class="hljs-built_in">string</span> cLCS::GetText(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; first, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; second)
{
    <span class="hljs-keyword">if</span> (m_results[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> &quot;&quot;;
    }
    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;
    <span class="hljs-function"><span class="hljs-built_in">stringstream</span> <span class="hljs-title">ss</span><span class="hljs-params">(&quot;&quot;)</span></span>;
    <span class="hljs-keyword">while</span> (i &lt; first.length() &amp;&amp; j &lt; second.length())
    {
        <span class="hljs-keyword">if</span> (first[i] == second[j])
        {
            ss &lt;&lt; first[i];
            i++;
            j++;
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_results[GetIndex(i + <span class="hljs-number">1</span>, j)] &gt;= m_results[GetIndex(i, j + <span class="hljs-number">1</span>)])
        {
            i++;
        }
        <span class="hljs-keyword">else</span>
        {
            j++;
        }
    }
    <span class="hljs-keyword">return</span> ss.str();
}
</code></pre>
<p>To find the longest common subsequence, we traverse through both the strings - <em><strong>first</strong></em> and <strong><em>second</em></strong> using indexes <strong><em>i</em></strong> and <strong><em>j</em></strong> respectively.</p>
<p>If <em><strong>first[i] = second[j]</strong></em>, then we add this character to the result string and increment both <strong><em>i</em></strong> and <em><strong>j</strong></em>.</p>
<p>If there is no match, that means that the subsequence was formed either by deleting <strong><em>first[i]</em></strong> or <strong><em>second[j]</em></strong>.</p>
<p>If <strong><em>m_results[i+1][j]</em></strong> &gt;= <strong><em>m_results[i][j + 1]</em></strong>, this means that the subsequence was formed by deleting <strong><em>first[i]</em></strong>. Otherwise, it was formed by deleting <strong><em>second[j]</em></strong>.</p>
<p>Continuing in this way, we can get the common subsequence.</p>
<h3 id="bottom-up-approach-with-dynamic-programming">Bottom-Up Approach with Dynamic Programming</h3>
<p>To develop a DP approach, we just flip the way we are storing the results by traversing the array backwards.</p>
<pre><code class="language-cpp hljs"><span class="hljs-built_in">string</span> cLCS::DP(<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&amp; first, <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&amp; second)
{
    <span class="hljs-keyword">int</span> length1 = first.length();
    <span class="hljs-keyword">int</span> length2 = second.length();
    <span class="hljs-keyword">if</span> (length1 == <span class="hljs-number">0</span> || length2 == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> &quot;&quot;;
    }

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = length1; i &gt;= <span class="hljs-number">0</span>; i--)
    {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = length2; j &gt;= <span class="hljs-number">0</span>; j--)
        {
            <span class="hljs-keyword">if</span> (first[i] == <span class="hljs-string">'\0'</span> || second[j] == <span class="hljs-string">'\0'</span>)
            {
                m_results[GetIndex(i, j)] = <span class="hljs-number">0</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first[i] == second[j])
            {
                m_results[GetIndex(i, j)] = <span class="hljs-number">1</span> + m_results[GetIndex(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>)];
            }
            <span class="hljs-keyword">else</span>
            {
                m_results[GetIndex(i, j)] = max(m_results[GetIndex(i + <span class="hljs-number">1</span>, j)], m_results[GetIndex(i, j + <span class="hljs-number">1</span>)]);
            }
        }
    }
    <span class="hljs-keyword">return</span> GetText(first, second);
}
</code></pre>
<p>The disadvantage of the bottom-up approach over memoizing is that this fills in the entire array even if the problem could be solved by computing a fraction of the array.</p>
<h3 id="bottom-up-approach-with-dynamic-programmingoptimised">Bottom-Up Approach with Dynamic Programming(optimised)</h3>
<p>We can optimise the above solution since once we have computed the row <strong><em>i</em></strong> of array <strong><em>m_results</em></strong>, we no longer need the values of <strong><em>i + 1</em></strong>.</p>
<p>However, we cannot recreate the subsequence using this approach and hence I won't be showing it here.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you would like to look at the code or run the benchmarks or tests yourself, you can find the code <a href="https://github.com/AnkurSheel/DynamicProgramming">here</a>.</p>
<p>In the following article in the series, we will look at another problem that can be solved by Dynamic Programming.</p>
<p>Have you tried Dynamic Programming before? How was your experience? Let me know.</p>
</body></html>



<aside class="hidden md:block mt-12">
        <div class="flex justify-center gap-x-5 ">
            <a class="bg-social-twitter social-button" href="https://twitter.com/intent/tweet?url=https://www.ankursheel.com/blog/dynamic-programming-longest-common-subsequence&text=In%20this%20article%2C%20we%20will%20use%20the%20above%20steps%20to%20arrive%20at%20a%20Dynamic%20Programming%20solution%20to%20the%20Longest%20Common%20Subsequence%20problem. via @ankur_sheel" target="_blank" rel="noopener noreferrer">Tweet this Article</a>
            <a class="bg-social-linkedin social-button" href="https://www.linkedin.com/sharing/share-offsite/?url=https://www.ankursheel.com/blog/dynamic-programming-longest-common-subsequence"target="_blank" rel="noopener noreferrer">Share on Linkedin</a>
        </div>
</aside>



        </article>
    </div>
</main>

<footer class="shadow-lg z-10 w-full bg-gray-500 text-white">
    
<div class="flex justify-between items-center max-w-6xl mx-auto px-4 py-3 mt-14">
    <div class="flex">
        <a class="" href="https://twitter.com/ankur_sheel" title="Connect on Twitter" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-6">
              <path fill="currentColor" fill-rule="evenodd" d="M7.233 4.696c0-1.727 1.4-3.127 3.127-3.127 1.014 0 1.823.479 2.365 1.175a5.246 5.246 0 0 0 1.626-.629 2.634 2.634 0 0 1-1.148 1.45l.002.003a5.26 5.26 0 0 0 1.5-.413l-.001.002c-.337.505-.76.95-1.248 1.313.026.177.04.354.04.53 0 3.687-2.809 7.975-7.975 7.975a7.93 7.93 0 0 1-4.296-1.26.5.5 0 0 1-.108-.748.45.45 0 0 1 .438-.215c.916.108 1.83-.004 2.637-.356a3.086 3.086 0 0 1-1.69-1.876.45.45 0 0 1 .103-.448 3.07 3.07 0 0 1-1.045-2.31v-.034a.45.45 0 0 1 .365-.442 3.068 3.068 0 0 1-.344-1.416c0-.468.003-1.058.332-1.59a.45.45 0 0 1 .323-.208.5.5 0 0 1 .538.161 6.964 6.964 0 0 0 4.46 2.507v-.044Zm-1.712 7.279a6.936 6.936 0 0 1-2.249-.373 5.318 5.318 0 0 0 2.39-1.042.45.45 0 0 0-.27-.804 2.174 2.174 0 0 1-1.714-.888c.19-.015.376-.048.556-.096a.45.45 0 0 0-.028-.876 2.18 2.18 0 0 1-1.644-1.474c.2.048.409.077.623.084a.45.45 0 0 0 .265-.824 2.177 2.177 0 0 1-.97-1.812c0-.168.003-.317.013-.453a7.95 7.95 0 0 0 5.282 2.376.5.5 0 0 0 .513-.61 2.127 2.127 0 0 1 2.071-2.614c1.234 0 2.136 1.143 2.136 2.432 0 3.256-2.476 6.974-6.975 6.974Z" clip-rule="evenodd"/>
            </svg>
        </a>
        <a class="ml-4" href="https://www.linkedin.com/in/ankursheel" title="View my LinkedIn profile" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6">
              <path fill="currentColor" d="M4.98 3.5C4.98 4.881 3.87 6 2.5 6S.02 4.881.02 3.5C.02 2.12 1.13 1 2.5 1s2.48 1.12 2.48 2.5zM5 8H0v16h5V8zm7.982 0H8.014v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0V24H24V13.869c0-7.88-8.922-7.593-11.018-3.714V8z"/>
            </svg>

        </a>

        <a class="ml-4" href="https://github.com/AnkurSheel" title="Check out my work on Github" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-6">
              <path fill="currentColor" fill-rule="evenodd" d="M7.5.85a6.65 6.65 0 0 0-2.102 12.96c.332.061.454-.144.454-.32 0-.159-.006-.576-.01-1.131-1.849.401-2.24-.892-2.24-.892-.302-.768-.738-.973-.738-.973-.604-.412.046-.404.046-.404.667.047 1.018.685 1.018.685.594 1.017 1.557.723 1.936.553.06-.43.232-.723.422-.889-1.477-.168-3.029-.738-3.029-3.287 0-.726.26-1.319.685-1.784-.069-.168-.297-.844.065-1.76 0 0 .558-.179 1.828.681A6.41 6.41 0 0 1 7.5 4.066a6.394 6.394 0 0 1 1.665.223c1.27-.86 1.827-.68 1.827-.68.363.915.135 1.59.066 1.759.427.465.684 1.058.684 1.784 0 2.555-1.555 3.117-3.036 3.282.238.205.45.611.45 1.232 0 .888-.007 1.605-.007 1.823 0 .178.12.385.457.32A6.652 6.652 0 0 0 7.499.85Z" clip-rule="evenodd"/>
            </svg>
        </a>

        <a class="ml-4" href="https://www.buymeacoffee.com/ankursheel" title="Buy Me A Coffee" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="feather feather-coffee h-6" viewBox="0 0 24 24">
              <path d="M18 8h1a4 4 0 0 1 0 8h-1M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8zm4-7v3m4-3v3m4-3v3"/>
            </svg>
        </a>
    </div>
    <div class="copy">
        © AnkurSheel 2021
    </div>
</div>

</footer>


<script src="/assets/js/blog.js"></script>
    <script data-goatcounter="https://ankursheel.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>



    <script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="ankursheel" data-description="Support me on Buy me a coffee!" data-message="Did you learn something or find this summary interesting? Buy me a coffee" data-color="#40DCA5" data-position="Right" data-x_margin="18" data-y_margin="18"></script>


</body>
</html>
