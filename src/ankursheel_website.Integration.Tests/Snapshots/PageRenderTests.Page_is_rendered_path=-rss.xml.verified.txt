<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Ankur Sheel</title>
		<link>https://www.ankursheel.com/</link>
		<description>I go down rabbit holes and blog about them</description>
		<copyright>2022</copyright>
		<pubDate>Sun, 02 Jan 2022 07:20:34 GMT</pubDate>
		<lastBuildDate>Sun, 02 Jan 2022 07:20:34 GMT</lastBuildDate>
		<item>
			<title>Weekly Roundup 51</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-51</link>
			<description>This weeks roundup contains articles from Slava Shestopalov, Ahmad Shadeed, Amelia Wattenberger, Kevon Cheung and Gergely Orosz</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-51/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-51</guid>
			<pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="designing-better-links-for-websites-and-emails-a-guideline"&gt;&lt;a href="https://uxdesign.cc/designing-better-links-for-websites-and-emails-a-guideline-5b8638ce675a"&gt;Designing better links for websites and emails — a guideline&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Slava Shestopalov&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just because something is common doesn't make it right. This article explains the common mistakes made when adding text links and making them more usable and accessible. It also shows the difference between bad and good links through examples.&lt;/p&gt;
&lt;h2 id="defensive-css"&gt;&lt;a href="https://ishadeed.com/article/defensive-css/"&gt;Defensive CSS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Ahmad Shadeed&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Defensive CSS is a practical set of styles that can help us avoid unexpected issues when writing CSS. So many nuggets in this article.&lt;/p&gt;
&lt;h2 id="visualizing-a-codebase"&gt;&lt;a href="https://next.github.com/projects/repo-visualization"&gt;Visualizing a codebase&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Amelia Wattenberger&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A fantastic article on how to visualize a GitHub repo with each file and folder depicted as a circle. The article also goes into the design and implementation of the visualization. Apart from some visualizations of some public repositories, you can also see the visualization for your own repositories.&lt;/p&gt;
&lt;h2 id="how-to-validate-your-tech-startup-idea"&gt;&lt;a href="https://kevoncheung.com/blog/validating-startup-ideas"&gt;How to Validate Your Tech Startup Idea&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Kevon Cheung&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is an excellent post that goes into the details of why building Toasty was a terrible idea, even though they talked to users and researched the space before building the product. What they learnt and how would Kevin evaluate future startup ideas for a B2b SaaS.&lt;/p&gt;
&lt;h2 id="the-cheetah-software-engineer-the-pragmatic-engineer"&gt;&lt;a href="https://blog.pragmaticengineer.com/the-cheetah-software-engineer/"&gt;The Cheetah Software Engineer - The Pragmatic Engineer&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Gergely Orosz&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most organizations are scared of 10x engineers because they are toxic. An observation in extreme detail on what a highly productive engineer can look like. Why they are so rare, and how you can manage them and keep them engaged?&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>What to do as an end-user when merchants using stripe decline your credit cards</title>
			<link>https://www.ankursheel.com/blog/merchants-using-stripe-decline-credit-cards</link>
			<description>My ongoing saga with Stripe support as an end-user to get them to stop blocking my card. A workaround while they try to resolve the issue</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/merchants-using-stripe-decline-credit-cards/cover.jpg" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/merchants-using-stripe-decline-credit-cards</guid>
			<pubDate>Wed, 29 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;For a long time, merchants using Stripe to process payments have declined my cards. It took me a long time to figure out what was happening.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.ankursheel.com/assets/images/posts/merchants-using-stripe-decline-credit-cards/cover.jpg" alt="A woman who enters her bank details while shopping online"&gt;&lt;/p&gt;
&lt;h2 id="what-i-tried-unsuccessfully"&gt;What I  tried (unsuccessfully)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I tried to use various cards, all of which work elsewhere (including overseas transactions).&lt;/li&gt;
&lt;li&gt;I tried to use cards in my wife's name, which also work elsewhere (including overseas transactions).&lt;/li&gt;
&lt;li&gt;I used both debit and credit cards.&lt;/li&gt;
&lt;li&gt;I spoke with my bank as suggested by various merchants. They confirmed there was no security holds on my account. They don't even see the failed transaction on their end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-light-bulb-goes-on"&gt;A light bulb goes on&lt;/h2&gt;
&lt;p&gt;Recently, I tried to place an order on a merchant using Stripe. As always, it got declined. On a whim, I decided to delete my account and recreate it in my wife's name. On placing an order using her account, the payment immediately went through. Remember, this is on the same merchant who had declined the payment from my account for the same card just a few minutes earlier.&lt;/p&gt;
&lt;p&gt;This led me to conclude that Stripe is blocking the payments based on my email.&lt;/p&gt;
&lt;h2 id="so-what-can-you-do"&gt;So what can you do?&lt;/h2&gt;
&lt;p&gt;If you are using Gmail as an email provider, you can just add &lt;em&gt;&lt;strong&gt;+merchant@gmail.com&lt;/strong&gt;&lt;/em&gt; to the email address, and this will create an alias for your Gmail account. This means that as far as Stripe is concerned, it's a different address from the one they blocked, but the emails from the merchant will still come to your email address.&lt;/p&gt;
&lt;p&gt;If it's so simple to bypass the decline, you would think it would be easy to get Stripe to take the email off the blocklist. You can read about the ongoing saga below.&lt;/p&gt;
&lt;h2 id="the-stripe-saga-my-attempt-to-resolve-this-with-stripe-support"&gt;The Stripe Saga: My Attempt to resolve this with Stripe support&lt;/h2&gt;
&lt;p&gt;With this new insight, I reached out to Stripe. I told them about the payments failing and my suspicion that the failure was because of my email and asked if there was some way to get my email off the blocklist. Unfortunately, Stripe needs a merchant to reach out to them to look at the issue. I haven't had much luck getting merchants to email stripe. Most merchants just suggest talking to the bank, which does not help when the bank does not even see the transaction.&lt;/p&gt;
&lt;p&gt;Over 3 months and in multiple emails, I communicated to Stripe that merchants are not contacting them because they either don't understand that the email is an issue or they have better things to do with their time. Each time it was a (semi?)canned reply along the lines of, "please reach out to a merchant and ask them to contact us".&lt;/p&gt;
&lt;p&gt;Finally, I sent them a screenshot showing Stripe's decline code as &lt;em&gt;"fraudulent"&lt;/em&gt;. I also sent them the response from a merchant clearly stating that they(merchant) thinks I should reach out to Stripe as they don't think they(Stripe) would give them the information. I also told them I bypassed the fraudulent decline code by providing an alternate email address.&lt;/p&gt;
&lt;p&gt;I was hoping that this would get Stripe to resolve the issue. But alas, I got the same canned reply.&lt;/p&gt;
&lt;p&gt;After telling them that I was getting tired of this chicken and egg problem, they linked some text to send to the merchant. I have sent this to the merchant, but I don't think the merchant has much incentive to prioritise this.&lt;/p&gt;
&lt;p&gt;I will update this section with any more progress.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.google.com/a/users/answer/9308648?hl=en"&gt;Creating alias email addresses on gmail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Cover Photo from &lt;a href="https://unsplash.com/photos/gf8e6XvG_3E"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Weekly Roundup 50</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-50</link>
			<description>This weeks roundup contains articles from JT McCormick, Mike Crittenden, iA, Michael Lopp and Byrne Hobart</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-50/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-50</guid>
			<pubDate>Sun, 26 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="how-to-solve-the-good-person-wrong-seat-problem"&gt;&lt;a href="https://www.entrepreneur.com/article/331248"&gt;How to Solve the Good Person, Wrong Seat Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;JT McCormick&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's much easier to have a conversation when you promote someone than when you ask someone to move laterally and for a pay-cut. An example of a conversation you can have when asking someone to change positions and take a pay cut.&lt;/p&gt;
&lt;h2 id="the-whys-and-hows-of-jelling-teams"&gt;&lt;a href="https://critter.blog/2016/10/27/the-whys-and-hows-of-jelling-teams/"&gt;The why's and how's of jelling teams&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Mike Crittenden&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A jelled team is vital for having a happy team. This article outlines some of the advantages of having a jelled team and then explains what things keep a team from jelling.&lt;/p&gt;
&lt;h2 id="subscription-or-no-subscription-that-is-not-the-question"&gt;&lt;a href="https://ia.net/topics/subscription-or-no-subscription"&gt;Subscription or no subscription? That is not the question&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;iA&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Subscriptions for software are ubiquitous, but not every type of software should be a subscription. This article explains why this is so and answers more critical questions such as when subscriptions work and when don't they? What can you do instead?&lt;/p&gt;
&lt;h2 id="the-update-the-vent-and-the-disaster"&gt;&lt;a href="https://randsinrepose.com/archives/the-update-the-vent-and-the-disaster/"&gt;The Update, The Vent, and The Disaster&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Michael Lopp&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having a good 1:1 is a tricky business. Did you know that most 1:1's can be thrown into 1 of the 3 buckets - The Update, The Vent and The Disaster. This article tells you how to know which type of 1:1 you are having and what to do in each case to have a productive 1:1.&lt;/p&gt;
&lt;h2 id="writing-is-networking-for-introverts"&gt;&lt;a href="https://byrnehobart.medium.com/writing-is-networking-for-introverts-5cac14ad4c77"&gt;Writing is Networking for Introverts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Byrne Hobart&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How do you network if you are an introvert and are bad at striking up conversations with strangers? As the title says, this article explains how writing is a good substitute for networking for introverts.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to use Access Control Lists (ACL) for Graphql subscriptions with Redis</title>
			<link>https://www.ankursheel.com/blog/use-acl-graphql-subscriptions-redis</link>
			<description>A guide to adding Access Control Lists (ACL)  for Redis to restrict access and using a restricted user for Graphql subscriptions with Hot Chocolate</description>
			<guid>https://www.ankursheel.com/blog/use-acl-graphql-subscriptions-redis</guid>
			<pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In the last post, we saw how we can &lt;a href="https://www.ankursheel.com/blog/implement-graqhql-subscriptions-hotchocolate-redis"&gt;add subscriptions to our Graphql server&lt;/a&gt;. This post will show how to set up an ACL (Access Control List) for Redis to restrict access to trusted clients.&lt;/p&gt;
&lt;h2 id="setting-up-redis-acl-access-control-list"&gt;Setting up Redis ACL (Access Control list)&lt;/h2&gt;
&lt;p&gt;Create a new file and call it &lt;em&gt;users.acl&lt;/em&gt;. In this file, we want to do 3 things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disable the default user&lt;/li&gt;
&lt;li&gt;add an admin user who is the same as a default user but has an explicit username.&lt;/li&gt;
&lt;li&gt;add a restricted user with access to a specific channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="disable-the-default-user"&gt;Disable the default user&lt;/h3&gt;
&lt;p&gt;By default, a single user without any restrictions is defined. We can disable the default user by adding &lt;code&gt;user default off&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="create-an-admin-user"&gt;Create an admin user&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;user admin on nopass ~* &amp;amp;* +@@all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This line creates a user with the username &lt;em&gt;&lt;strong&gt;admin&lt;/strong&gt;&lt;/em&gt;. This user is configured to be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;on&lt;/strong&gt;: active&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nopass&lt;/strong&gt;: require no password&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~*&lt;/strong&gt;: access every possible key&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;*&lt;/strong&gt;: access every Pub/Sub channel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+@@all&lt;/strong&gt;: able to call every possible command&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="create-a-restricted-user-for-graphql-subscriptions"&gt;Create a restricted user for Graphql subscriptions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;user test on nopass ~* resetchannels &amp;amp;cdd/graphql_subscriptions/* -@@all +@@connection +@@pubsub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This line creates a user with the username &lt;em&gt;&lt;strong&gt;test&lt;/strong&gt;&lt;/em&gt;. This user is configured to be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;on&lt;/strong&gt;: active&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nopass&lt;/strong&gt;: require no password&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~*&lt;/strong&gt;: access every possible key&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;resetchannels&lt;/strong&gt;: : Resetsw the list of allowed channel patterns and disconnect the user from channels it doesnt have access to anymore.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;graphql_subscriptions/*&lt;/strong&gt;: access everything under the &lt;em&gt;graphql_subscriptions&lt;/em&gt; channel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-@@all +@@connection +@@pubsub&lt;/strong&gt;: Restrict access to the connection and pubsub commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="setting-up-redis-configuration"&gt;Setting up Redis configuration&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;redis.conf&lt;/em&gt; file allows us to configure Redis and set up authentication.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aclfile /usr/local/etc/redis/users.acl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This tells Redis that we want to use an external aclfile found at &lt;em&gt;/usr/local/etc/redis/&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="updating-hot-chocolate-to-use-a-custom-user"&gt;Updating Hot Chocolate to use a custom user&lt;/h2&gt;
&lt;p&gt;In our &lt;em&gt;Startup.cs&lt;/em&gt; class, we need to update the configuration options to set the user for the Redis server. We also set the channelPrefix as the graphpqlSubscriptionUser only has access to &lt;em&gt;graphql_subscriptions&lt;/em&gt; channel.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;ConfigureServices&lt;/span&gt;(&lt;span class="hljs-params"&gt;IServiceCollection services&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ConfigurationOptions
            {
                EndPoints = { "localhost:&lt;span class="hljs-number"&gt;6379&lt;/span&gt;" },
                User = "graphpqlSubscriptionUser",
                ChannelPrefix = "graphql_subscriptions/"
            };

    services.AddGraphQLServer()
        .AddQueryType&amp;lt;Query&amp;gt;()
        .AddMutationType&amp;lt;Mutation&amp;gt;()
        .AddSubscriptionType&amp;lt;Subscription&amp;gt;()
        .AddRedisSubscriptions(_ =&amp;gt; ConnectionMultiplexer.Connect(options));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="adding-a-docker-compose-file"&gt;Adding a docker compose file&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-dockerfile hljs"&gt;version: &lt;span class="hljs-string"&gt;'3'&lt;/span&gt;
services:
  redis:
    image: redis:&lt;span class="hljs-number"&gt;6.2&lt;/span&gt;-alpine
    ports:
      - "&lt;span class="hljs-number"&gt;6379&lt;/span&gt;:&lt;span class="hljs-number"&gt;6379&lt;/span&gt;"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - ./users.acl:/usr/local/etc/redis/users.acl
    container_name: redis-graphql
    command: redis-server /usr/local/etc/redis/redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can run the command &lt;code&gt;docker-compose up --force-recreate -d --build&lt;/code&gt; to start the Redis container.&lt;/p&gt;
&lt;h2 id="demo-project"&gt;Demo Project&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href="https://github.com/AnkurSheel/HotChocolateSubscriptions"&gt;demo project&lt;/a&gt; you can check out over on GitHub.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redis.io/topics/acl"&gt;Redis ACL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackexchange.github.io/StackExchange.Redis/Configuration"&gt;StackExchange.Redis Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Weekly Roundup 49</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-49</link>
			<description>This weeks roundup contains articles from David McCarter, Janella, Paul Swail, Mike Petrovich and Brian Rinaldi</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-49/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-49</guid>
			<pubDate>Sun, 19 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="collection-performance-how-do-you-linq"&gt;&lt;a href="https://dotnettips.wordpress.com/2021/12/15/collection-performance-how-do-you-linq"&gt;Collection Performance: How Do You Linq?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;David McCarter&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This article compares the performance of some common LINQ Queries when it's written using the API vs a lambda and the performance of the different ways to use the lambda versions.&lt;/p&gt;
&lt;h2 id="good-enough"&gt;&lt;a href="https://blog.janella.nz/posts/2021/08/22/deciding-good-enough.html"&gt;Good enough&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Janella&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's easy to fall into the trap of future-proofing our code. This article can help us see the key signs indicating that we need to step back from the details. It also outlines the questions we should ask to decide if something is good enough. As an added bonus, there are also some tips on easing ourselves into decision making if we are prone to imposter syndrome.&lt;/p&gt;
&lt;h2 id="the-testing-trade-off-triangle"&gt;&lt;a href="https://serverlessfirst.com/testing-tradeoff-triangle"&gt;The testing trade-off triangle&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Paul Swail&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Did you know that every time we choose a testing strategy, we need to compromise between confidence level, feedback loop, and maintainability? This article shares some examples of who the loser is when we optimize for one of them and some questions we should ask ourselves to inform or test strategy.&lt;/p&gt;
&lt;h2 id="the-three-dominoes"&gt;&lt;a href="https://petro.blog/the-3-domino-rule-85888e009e5a"&gt;The Three Dominoes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Mike Petrovich&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are 3 simple rules to make it easier for a team to operate: limit work-in-progress, Minimize specialization, and Never sacrifice quality. Read this article to know how each of these rules helps the team achieve long-term success and the limitations of each of the rules.&lt;/p&gt;
&lt;h2 id="rendering-in-the-jamstack"&gt;&lt;a href="https://bejamas.io/blog/understanding-rendering-in-the-jamstack/"&gt;Rendering in the Jamstack&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Brian Rinaldi&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Multiple rendering options are available in JAMstack applications. This article gives an in-depth overview of the different rendering options and helps you choose which one to use when.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Weekly Roundup 48</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-48</link>
			<description>This weeks roundup contains articles from Gergely Orosz, Stephan Ango, Andrew Wilkinson, Kevon Cheung and Avy Faingezicht</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-48/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-48</guid>
			<pubDate>Sun, 12 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="hiring-and-retaining-a-diverse-engineering-team"&gt;&lt;a href="https://blog.pragmaticengineer.com/hiring-a-diverse-engineering-team/"&gt;Hiring (and Retaining) a Diverse Engineering Team&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Gergely Orosz&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Almost everyone agrees that having a diverse team is better for business. But the question remains -&amp;gt; &amp;quot;How do you hire more diverse teams?&amp;quot; Gregory talks to 6 engineering leaders who have successfully built diverse teams about hiring and retaining diverse engineering teams.&lt;/p&gt;
&lt;h2 id="questions-to-ask-yourself-every-year"&gt;&lt;a href="http://stephanango.com/40-questions"&gt;40 questions to ask yourself every year&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Stephan Ango&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The end of the year is a good time for introspection. If you are having a hard time coming up with questions to ask yourself, Stephan shares a list of 40 questions he asks himself every year. This should be enough to get you started.&lt;/p&gt;
&lt;h2 id="the-power-of-anti-goals"&gt;&lt;a href="https://awilkinson.medium.com/the-power-of-anti-goals-c38f5f46d23c"&gt;The Power of Anti-Goals&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Andrew Wilkinson&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When thinking about what we want to achieve, most of us start by thinking about what we want to do. Andrew instead thought of the worst day possible and came up with Anti-goals to avoid it. I feel it's a strategy worth exploring to have more enjoyable days.&lt;/p&gt;
&lt;h2 id="how-i-hustled-to-2kmo-and-got-rid-of-it"&gt;&lt;a href="https://kevoncheung.com/blog/creators-monetization-challenges"&gt;How I Hustled to $2K/mo and Got Rid of It&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Kevon Cheung&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A behind-the-scenes look at how Kevin created multiple revenue streams to reach 2k/month and why he eventually scrapped them.&lt;/p&gt;
&lt;h2 id="how-to-evaluate-startup-offers-a-beginners-guide"&gt;&lt;a href="https://faingezicht.com/articles/2021/09/20/evaluating-startup-offers/"&gt;How to Evaluate Startup Offers - A Beginner's Guide&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Avy Faingezicht&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It can be tough to compare different startup offers. This article gives a really nice overview of what working for a VC-funded startup looks like financially.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Weekly Roundup 47</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-47</link>
			<description>This weeks roundup contains articles from Ramit Sethi, Muhammed Saleem, Robert Heaton, Charity Majors and David McCarter</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-47/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-47</guid>
			<pubDate>Sun, 05 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="career-seasons-choosing-a-role-based-on-the-lifestyle-you-want"&gt;&lt;a href="https://www.iwillteachyoutoberich.com/blog/career-seasons/"&gt;Career Seasons: Choosing a Role Based on the Lifestyle You Want&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Ramit Sethi&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At different points in our lives, we are in a different season of our careers. The 3 different career seasons are Growth, Lifestyle and Reinvention. It's important to know what season we are in to tailor our job search accordingly. This article can help us figure out what career season we are in.&lt;/p&gt;
&lt;h2 id="dependency-injection-lifetimes-in-asp.net-core"&gt;&lt;a href="https://code-maze.com/dependency-injection-lifetimes-aspnet-core/?utm_source=pocket_mylisthttps://code-maze.com/dependency-injection-lifetimes-aspnet-core/"&gt;Dependency Injection Lifetimes in ASP.NET Core&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Muhammed Saleem&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In ASP.NET Core, we can register the dependencies for three different lifetimes. I always get confused about when to use which. This article compares the 3 injection lifetimes by example. It has recommendations for when to use each and when not to use.&lt;/p&gt;
&lt;h2 id="how-to-write-better-sentences-6-examples"&gt;&lt;a href="https://robertheaton.com/better-sentences/"&gt;How to write better sentences: 6 examples&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Robert Heaton&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can improve our articles by making minor tweaks to our writing. This article contains 6 real-world sentences that Robert has made shorter and cleaner.&lt;/p&gt;
&lt;h3 id="lies-my-parents-told-me-about-logs"&gt;&lt;a href="https://www.honeycomb.io/blog/lies-my-parents-told-me-about-logs/"&gt;Lies My Parents Told Me (About Logs)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;by&lt;/em&gt; &lt;strong&gt;Charity Majors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All of us have some assumptions about logs. Some used to be true, but some never really were. This article outlines some of the common misconceptions about logs.&lt;/p&gt;
&lt;h3 id="when-are-companies-going-to-learn-how-software-development-works"&gt;&lt;a href="https://dotnettips.wordpress.com/2021/07/15/when-are-companies-going-to-learn-how-software-development-works/"&gt;When Are Companies Going To Learn How Software Development Works?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;by&lt;/em&gt; &lt;strong&gt;David McCarter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many companies make the same mistakes repeatedly that doom their software projects to failure. A story about how David unearthed during an interview of a company making those mistakes.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How do I implement Graphql subscriptions in HotChocolate with Redis</title>
			<link>https://www.ankursheel.com/blog/implement-graqhql-subscriptions-hotchocolate-redis</link>
			<description>A guide to adding subscriptions to a HotChocolate GraphQL API with a Redis provider</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/implement-graqhql-subscriptions-hotchocolate-redis/images/redis_response.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/implement-graqhql-subscriptions-hotchocolate-redis</guid>
			<pubDate>Thu, 11 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;GraphQL offers us real-time capabilities to notify us when a specific event happens.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will add subscriptions to our graphql server. We will create an &lt;code&gt;onPing&lt;/code&gt; event that will send notifications whenever we ping the server with an input string.&lt;/p&gt;
&lt;p&gt;We will also use Redis that runs in a docker container, and see how we can listen to the events in a Redis command shell.&lt;/p&gt;
&lt;h2 id="running-redis-using-docker"&gt;Running Redis using docker&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;docker run &lt;span class="hljs-_"&gt;-d&lt;/span&gt; --name=redis-graphql -p 6379:6379 redis:6.0-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="adding-a-subscription"&gt;Adding a Subscription&lt;/h2&gt;
&lt;p&gt;We will add a new class Subscription which will have our &lt;code&gt;onPing&lt;/code&gt; event.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Subscription&lt;/span&gt; : &lt;span class="hljs-title"&gt;ObjectType&lt;/span&gt;
{
    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;override&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;Configure&lt;/span&gt;(&lt;span class="hljs-params"&gt;IObjectTypeDescriptor descriptor&lt;/span&gt;)
    &lt;/span&gt;{
        descriptor.Field("onPing")
            .Type&amp;lt;NonNullType&amp;lt;StringType&amp;gt;&amp;gt;()
            .Resolve(ctx =&amp;gt; ctx.GetEventMessage&amp;lt;&lt;span class="hljs-keyword"&gt;string&lt;/span&gt;&amp;gt;())
            .Subscribe(&lt;span class="hljs-keyword"&gt;async&lt;/span&gt; ctx =&amp;gt; &lt;span class="hljs-keyword"&gt;await&lt;/span&gt; ctx.Service&amp;lt;ITopicEventReceiver&amp;gt;().SubscribeAsync&amp;lt;&lt;span class="hljs-keyword"&gt;string&lt;/span&gt;, &lt;span class="hljs-keyword"&gt;string&lt;/span&gt;&amp;gt;("onPing", ctx.RequestAborted));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 5&lt;/em&gt;&lt;/strong&gt;: The topic for the subscription.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 7&lt;/em&gt;&lt;/strong&gt;: Gets the message payload.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 8&lt;/em&gt;&lt;/strong&gt;: Subscribes to the pub/sub system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use subscriptions, we need to add the WebSockets middleware to our request pipeline.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-comment"&gt;// Startup.cs&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;Configure&lt;/span&gt;(&lt;span class="hljs-params"&gt;IApplicationBuilder app, IWebHostEnvironment env&lt;/span&gt;)
&lt;/span&gt;{
    app.UseWebSockets();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Middleware order is important with .NET Core, so this middleware needs to come before the GraphQL middleware.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next, We need to register our subscriptions and set up the Redis subscription provider in the Startup class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;ConfigureServices&lt;/span&gt;(&lt;span class="hljs-params"&gt;IServiceCollection services&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ConfigurationOptions
    {
        EndPoints = { "localhost:&lt;span class="hljs-number"&gt;6379&lt;/span&gt;" },
    };

    services.AddGraphQLServer()
            .AddSubscriptionType&amp;lt;Subscription&amp;gt;();
            .AddRedisSubscriptions(_ =&amp;gt; ConnectionMultiplexer.Connect(options));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Redis is on port 6379 by default.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="publishing-the-event"&gt;Publishing the event&lt;/h2&gt;
&lt;p&gt;Our mutation needs to use &lt;code&gt;ITopicEventSender&lt;/code&gt; to send messages to the underlying pub/sub system.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Mutation&lt;/span&gt; : &lt;span class="hljs-title"&gt;ObjectType&lt;/span&gt;
{
    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;override&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;Configure&lt;/span&gt;(&lt;span class="hljs-params"&gt;IObjectTypeDescriptor descriptor&lt;/span&gt;)
    &lt;/span&gt;{
        descriptor.Field("ping")
            .Type&amp;lt;NonNullType&amp;lt;StringType&amp;gt;&amp;gt;()
            .Argument("payload", des =&amp;gt; des.Type&amp;lt;NonNullType&amp;lt;StringType&amp;gt;&amp;gt;())
            .Resolve(
                &lt;span class="hljs-keyword"&gt;async&lt;/span&gt; ctx =&amp;gt;
                {
                    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; input = ctx.ArgumentValue&amp;lt;&lt;span class="hljs-keyword"&gt;string&lt;/span&gt;&amp;gt;("payload");

                    &lt;span class="hljs-keyword"&gt;await&lt;/span&gt; ctx.Service&amp;lt;ITopicEventSender&amp;gt;().SendAsync("onPing", input);
                    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; input;
                });
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 13:&lt;/em&gt;&lt;/strong&gt;: "onPing" is the topic we want to publish, and &lt;em&gt;input&lt;/em&gt; is our payload.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="testing"&gt;Testing&lt;/h2&gt;
&lt;p&gt;We can start an Interactive Shell for the Redis Docker Container.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;docker &lt;span class="hljs-built_in"&gt;exec&lt;/span&gt; -it redis-graphql redis-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can subscribe to the &lt;em&gt;onPing&lt;/em&gt; channel using the subscribe command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;subscribe onPing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://www.ankursheel.com/assets/images/posts/implement-graqhql-subscriptions-hotchocolate-redis/redis_docker_interactive_shell.png" alt="Subscribing to the topic in an interactive shell for redis"&gt;&lt;/p&gt;
&lt;p&gt;In Insomnia (or your IDE of choice), add the following mutation.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-graphql"&gt;mutation {
    ping(payload: "hello")
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On execution, we should see the following responses.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.ankursheel.com/assets/images/posts/implement-graqhql-subscriptions-hotchocolate-redis/mutation.png" alt="Mutation and response"&gt;&lt;/p&gt;
&lt;p&gt;In the shell, we can see the event on Redis.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.ankursheel.com/assets/images/posts/implement-graqhql-subscriptions-hotchocolate-redis/redis_response.png" alt="Event caught by Redis listener"&gt;&lt;/p&gt;
&lt;h2 id="demo-project"&gt;Demo Project&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href="https://github.com/AnkurSheel/HotChocolateSubscriptions"&gt;demo project&lt;/a&gt; you can check out over on GitHub.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Weekly Roundup 46</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-46</link>
			<description>This weeks roundup contains articles from Gergely Orosz, Anuraj, Shaundai Person, Andrew Lock and Morgan Housel</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-46/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-46</guid>
			<pubDate>Sun, 07 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!-- markdownlint-disable no-duplicate-header --&gt;
&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="the-pragmatic-engineer-test-12-questions-on-engineering-culture"&gt;&lt;a href="https://blog.pragmaticengineer.com/pragmatic-engineer-test/"&gt;The Pragmatic Engineer Test: 12 Questions on Engineering Culture&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Gergely Orosz&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You have probably heard of the &lt;a href="https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/"&gt;Joel Test&lt;/a&gt;, but it's 20 years old, and most companies can answer &lt;strong&gt;yes&lt;/strong&gt; to those questions. These questions are better suited to rate the quality of a software team in today's world.&lt;/p&gt;
&lt;h2 id="implementing-content-security-policy-csp-in-asp.net-core"&gt;&lt;a href="https://dotnetthoughts.net/implementing-content-security-policy-in-aspnetcore/"&gt;Implementing Content Security Policy (CSP) in ASP.NET Core&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Anuraj&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;CSP (Content Security Policy) is a security layer that helps us mitigate and report XSS(Cross-Site Scripting) attacks. This is a guide for creating middleware to set the header to the HTTP response in .Net Core.&lt;/p&gt;
&lt;h2 id="how-potty-training-shaped-my-tech-teaching-style"&gt;&lt;a href="https://dev.to/shaundai/how-potty-training-shaped-my-tech-teaching-style-29e2"&gt;How Potty Training Shaped My Tech Teaching Style&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Shaundai Person&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Did you know there are parallels between teaching coding and potty training? In both cases, we are giving someone a tool they have never seen before combined with a language they have never heard before and then expecting them to do something they have never done before. This article outlines what can we do differently to avoid these mistakes.&lt;/p&gt;
&lt;h2 id="debugging-configuration-values-in-asp.net-core"&gt;&lt;a href="https://andrewlock.net/debugging-configuration-values-in-aspnetcore/"&gt;Debugging configuration values in ASP.NET Core&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Andrew Lock&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When working with .Net Core, it can be useful to inspect the resolved configuration settings to determine why a configuration value does not have the value we expect. This post shows how to use &lt;code&gt;GetDebugView()&lt;/code&gt; to determine where the configuration values have come from. It also goes through the implementation.&lt;/p&gt;
&lt;h2 id="the-three-sides-of-risk"&gt;&lt;a href="https://www.collaborativefund.com/blog/the-three-sides-of-risk/"&gt;The Three Sides of Risk&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Morgan Housel&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What can skiing teach you about investing? A lot, it seems. There are distinct sides of risk 2 of which are easy to grasp. But the last one, the tail-end consequences of getting hit, can often be learned only through experience. But the tail-end events are all that matter. This is also why I always consider the worst outcome of any decision, and only if I am ok with it is when I take the risk.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to move a commit between repositories</title>
			<link>https://www.ankursheel.com/blog/move-commit-between-repositories</link>
			<description>Steps to move a commit from one repository to another</description>
			<guid>https://www.ankursheel.com/blog/move-commit-between-repositories</guid>
			<pubDate>Thu, 04 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Sometimes you have a commit in a repository that you want to bring over to another repository. We can follow these steps to do just that.&lt;/p&gt;
&lt;h3 id="create-a-patch"&gt;Create a patch&lt;/h3&gt;
&lt;p&gt;In the source repository, we can create a patch that describes the commit by running.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;git format-patch -1 &amp;lt;sha&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-1&lt;/strong&gt;: The number of commits to create the patch for&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sha&lt;/strong&gt;: The SHA of the commit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="apply-the-patch"&gt;Apply the patch&lt;/h3&gt;
&lt;p&gt;In the target repository, we can apply the patch with&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;git apply PATH_TO_PATCH --reject
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reject&lt;/strong&gt;: Applies the parts of the patch that are applicable and leaves the rejected hunks in corresponding *.rej files. We have to apply these manually.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-format-patch"&gt;git-format-patch Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-apply"&gt;git-apply Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Weekly Roundup 45</title>
			<link>https://www.ankursheel.com/blog/weekly-roundup-45</link>
			<description>This weeks roundup contains articles from Ramit Sethi, Ruth, Kent Dodds, Fon Nkwenti and Fajar Zuhri Hadiyanto</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/weekly-roundup-45/assets/images/weekly-roundup-cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/weekly-roundup-45</guid>
			<pubDate>Sat, 30 Oct 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!-- markdownlint-disable no-duplicate-header --&gt;
&lt;p&gt;Every week I come across some great articles. Here are some of the posts I feel you will enjoy reading as much as I did.&lt;/p&gt;
&lt;h2 id="is-renting-a-waste-of-money"&gt;&lt;a href="https://www.iwillteachyoutoberich.com/blog/renting-is-not-a-waste/"&gt;Is Renting a Waste of Money&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Ramit Sethi&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Even though it's the same thing as paying to eat at a restaurant, many people believe that renting is throwing away money. This article shares the common reasons why believe the myth that renting is throwing away money.&lt;/p&gt;
&lt;h2 id="are-you-scared-of-not-buying-a-house"&gt;&lt;a href="https://www.thehappysaver.com/blog/are-you-scared-of-not-buying-a-house"&gt;Are you scared of NOT buying a house?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Ruth&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A New Zealand centric article on the potential solutions for people struggling to buy a house in the NZ market. The article also goes into what's great and not so great about renting.&lt;/p&gt;
&lt;h2 id="how-i-built-a-modern-website-in-2021"&gt;&lt;a href="https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021"&gt;How I built a modern website in 2021&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Kent Dodds&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A blog post about how Kent rebuilt his website using modern tools. It gives an excellent overview of the architecture and tech used, so you can probably pick up some tidbits for your blog even if you don't have the same use case.&lt;/p&gt;
&lt;h2 id="getting-started-with-aws-cli-v2-as-a-docker-container"&gt;&lt;a href="https://dev.to/aws-builders/getting-started-with-aws-cli-v2-as-a-docker-container-j23"&gt;Getting Started with AWS CLI v2 as a Docker Container&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Fon Nkwenti&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Using the AWS CLI version 2 in a container-based environment means we don't have to manage the installation and dependencies ourselves.&lt;/p&gt;
&lt;h2 id="database-normalization"&gt;&lt;a href="https://dev.to/fajarzuhrihadiyanto/database-normalization-jil"&gt;Database Normalization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;strong&gt;Fajar Zuhri Hadiyanto&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The steps to normalize a database from completely un-normalized to 5NF by way of an example.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to change the author of multiple Git commits</title>
			<link>https://www.ankursheel.com/blog/change-author-multiple-git-commits</link>
			<description>A snippet for updating the author details of several commits in a git repository</description>
			<guid>https://www.ankursheel.com/blog/change-author-multiple-git-commits</guid>
			<pubDate>Thu, 28 Oct 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;I have two accounts from which I access my GitHub repositories. I have set one of them as a global setting. On a per-repository basis, I sometimes override the default details with my other account. Sometimes, I forget to override the default values and realize it only after making a few commits.&lt;/p&gt;
&lt;p&gt;This post will show how we can update the author after making a few commits with incorrect details.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;First, we need to update our gitconfig with the author details.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;[user]
name = author_name
email = author_email
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can run the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;git rebase -i &amp;lt;commit_hash&amp;gt; -x "git commit --amend --reset-author -CHEAD"
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;git rebase -i&lt;/strong&gt;: Runs git rebase in interactive mode, allowing altering individual commits in the process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;commit_hash&amp;gt;&lt;/strong&gt;: The hash of the commit after which we want to update the author.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-x&lt;/strong&gt;: Append the shell command for each line creating a commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git commit --amend&lt;/strong&gt;: Modify the most recent commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--reset-author&lt;/strong&gt;: Resets the author to the settings in the .gitconfig.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-CHEAD&lt;/strong&gt;: -C takes the existing commit object and reuses the log message without allowing the user to edit it. HEAD refers to the current commit we are viewing. -CHEAD takes the message from the current commit without opening the editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will then be presented with an editor to confirm all the commits we want.&lt;/p&gt;
&lt;p&gt;We can run the following command to update the author for all commits, including the root.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;git rebase -i --root -x "git commit --amend --reset-author -CHEAD"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This will update the author details for all the specified commits. This is also why it's important to sign your commits so that no one else can attribute bad malicious commits to you. You can see how to do this by following the steps in the &lt;a href="https://www.ankursheel.com/securing-git-commits-windows"&gt;guide to securing git commits from tricking you on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-commit"&gt;git-commit Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/gitrevisions"&gt;gitrevisions Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-rebase"&gt;git-rebase Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>What's in a team name</title>
			<link>https://www.ankursheel.com/blog/team-name</link>
			<description>Having a team name is one of the easiest ways to give everyone an identity to rally around. A controversial opinion on how to decide team names</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/team-name/cover.jpg" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/team-name</guid>
			<pubDate>Thu, 21 Oct 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!-- https://unsplash.com/photos/ocAo7MwGfHY --&gt;
&lt;p&gt;Most people would agree that having a team name is one of the easiest ways to give everyone an identity to rally around. And they would start by mandating that all team names should be pulled from an overarching theme.&lt;/p&gt;
&lt;p&gt;This will be a controversial opinion, but I think this is possibly the worst way to decide team names.&lt;/p&gt;
&lt;h2 id="a-common-theme"&gt;A common theme&lt;/h2&gt;
&lt;p&gt;A popular reason that people think using a common theme for all team names is a good idea is that they feel it's inclusive.&lt;/p&gt;
&lt;p&gt;But, it's tough to find a genuinely inclusive theme. Even something innocuous like superheroes can make someone feel excluded if they haven't grown up watching superhero cartoons.&lt;/p&gt;
&lt;p&gt;So you decide to go with something &lt;del&gt;boring&lt;/del&gt; simple like colours.&lt;/p&gt;
&lt;Quote quote="Surely, no one can take offence in that, right?" /&gt;
&lt;p&gt;Not so fast, my young padawan. You forgot to consider colour blind people.&lt;/p&gt;
&lt;p&gt;The other reason that frequently comes up is that a common theme makes it easier for people to remember. For the sake of this discussion, let's assume that either colours or superheroes are an inclusive-enough theme for you, and you have two teams. But do the people in your organization know whether they need to talk to the &lt;strong&gt;Superman/Pink&lt;/strong&gt; team or the &lt;strong&gt;WonderWoman/Blue&lt;/strong&gt; team. More likely, they are saying.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I need to talk to &lt;strong&gt;Harry/Jane&lt;/strong&gt;. What is the name of the team? - Ah, who cares?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or worse, they are mixing it up and talking to the wrong team and then getting redirected.&lt;/p&gt;
&lt;p&gt;What if you have ten teams? No common theme can save you.&lt;/p&gt;
&lt;p&gt;I think this tweet sums it up nicely.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I worked in the company where teams were named after superheroes in Marvel universe. I missed the whole hype around superheros, so I had to learn it. Like there weren't enough other things to learn.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Vladimir Sapronov&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://twitter.com/v_sapronov/status/1440147633155166210"&gt;Tweet link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you want to have team names with no connection to the product, I have a controversial recommendation for you. Let them come about from an inside joke, a conversation or a common identity that the team members can ascribe to.&lt;/p&gt;
&lt;h2 id="an-inside-joke"&gt;An inside joke&lt;/h2&gt;
&lt;Quote quote="Jelled teams are usually marked by a strong sense of identity" author="Peopleware" /&gt;
&lt;p&gt;Having a team name based on an inside joke gives it a unique identity. It's the uniqueness between the names and what that difference signifies that binds one identity to it.&lt;/p&gt;
&lt;p&gt;It gives this feeling of being a part of an elite entity.&lt;/p&gt;
&lt;p&gt;In his similarly titled post &lt;a href="https://critter.blog/2020/09/02/whats-in-a-team-name/"&gt;What’s in a team name?&lt;/a&gt;, Mike gives an excellent example of how hard it would be to rally around &amp;quot;the Vikings&amp;quot; if they were called the &amp;quot;The Minnesota NFL Team&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now, before you go all up in arms and say,&lt;/p&gt;
&lt;Quote quote="But, Ankur, having an inside joke for a team name doesn't solve for any of the problems you highlighted before" /&gt;
&lt;p&gt;I kinda agree.&lt;/p&gt;
&lt;p&gt;A team name based on an inside joke is not inclusive by nature to new people. But, every time a new member gets added, there is room for sharing stories around the team name and introducing that meaning to the new people. It can be a great ice-breaker.&lt;/p&gt;
&lt;p&gt;Whether it's easier to remember or not, that's debatable. But it can certainly be more memorable, and memorable things get remembered faster. After all, would you be able to forget a name like &lt;a href="https://twitter.com/catswetel/status/1440039225156538374"&gt;The Applesauce Top Hat Brigade&lt;/a&gt;? It's a name I am not going to forget anytime soon.&lt;/p&gt;
&lt;p&gt;Team names based on an inside joke are not only more fun but have a few additional advantages.&lt;/p&gt;
&lt;p&gt;As the old guard moves on, the team members change, and the inside joke becomes stale/politically incorrect; it makes it much easier to retire the team name and spin up a new one based on a new inside joke.&lt;/p&gt;
&lt;p&gt;As the number of teams increases, each new team could think of their inside joke to rally around for their team name. Apart from a fun bonding exercise, it could be a great morale booster.&lt;/p&gt;
&lt;p&gt;Merch/swag also feels cooler when it's associated with an inside joke. Remember, it is a potential ice-breaker.&lt;/p&gt;
&lt;h2 id="my-favourite-team-name"&gt;My favourite team name&lt;/h2&gt;
&lt;p&gt;One of my favourite team names was based on an inside joke. We were supposed to come up with a name for our team and forgot to submit it in time. In the slide deck for the company meeting, we were introduced as ???. This struck us as extremely funny, and combined with other reasons, we decided to call our team 4Q.&lt;/p&gt;
&lt;p&gt;You can see how this can be construed as offensive because it sounds like a cuss word. I rarely cuss, and this gave me a laugh every time I said Team 4Q (which was one of the reasons to go with it).&lt;/p&gt;
&lt;p&gt;In any case, people had a valid concern. It sounds like a cuss word. Considering that cuss words are used regularly during internal conversations, it's not so much of a problem.&lt;/p&gt;
&lt;p&gt;But, it is a problem when communicating verbally with external parties.&lt;/p&gt;
&lt;p&gt;There was a simple fix - to use the name Team 4 Questions when talking externally or to enunciate the name so that it doesn't sound like a cuss word.&lt;/p&gt;
&lt;p&gt;Changing the name in this scenario would be a classic case of throwing the baby out with the bathwater.&lt;/p&gt;
&lt;h2 id="caveats"&gt;Caveats&lt;/h2&gt;
&lt;p&gt;It's possible to have stories to share even if you are operating under a common theme. My current team is called &lt;a href="https://www.doc.govt.nz/nature/native-animals/birds/birds-a-z/nz-falcon-karearea/"&gt;kārearea&lt;/a&gt;, and it appealed to me (more than the other birds) because it's fast and can bring down prey larger than itself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But, I doubt new people will care about the reasoning behind choosing it as the team name. Sadly, it's not a conversation starter when all the other teams are named after NZ birds. It will always feel as if we randomly chose it because we had to choose something.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It's safe to say that good team names are essential. But, it's more valuable to make them memorable and have a unique individuality rather than force them into conformity.&lt;/p&gt;
&lt;p&gt;Having said that, you should probably have some guidelines to weed out the truly offensive.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to add estimated Reading Time to Posts in Statiq</title>
			<link>https://www.ankursheel.com/blog/add-estimated-reading-time-posts-statiq</link>
			<description>A guide to creating a module to add estimated reading time as metadata for posts in websites created with Statiq</description>
			<enclosure url="https://www.ankursheel.com/assets/images/posts/add-estimated-reading-time-posts-statiq/cover.png" length="0" type="image" />
			<guid>https://www.ankursheel.com/blog/add-estimated-reading-time-posts-statiq</guid>
			<pubDate>Thu, 14 Oct 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this tutorial, I will show how to use the reading time calculated in &lt;a href="https://www.ankursheel.com/calculate-reading-time"&gt;How to calculate reading time&lt;/a&gt; to use in a Statiq module to add reading time for our posts.&lt;/p&gt;
&lt;p&gt;To add a module to Statiq, we can inherit from one of the provided base module classes. In this case, we can inherit from the &lt;code&gt;ParallelModule&lt;/code&gt; class as the engine can process the documents in any order. We also need to overload the &lt;code&gt;ExecuteInputAsync()&lt;/code&gt; method to execute this module for each document in the pipeline.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;GenerateReadingTime&lt;/span&gt; : &lt;span class="hljs-title"&gt;ParallelModule&lt;/span&gt;
{
    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;override&lt;/span&gt; &lt;span class="hljs-keyword"&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;IDocument&amp;gt;&amp;gt; ExecuteInputAsync(IDocument input, IExecutionContext context)
    {
        &lt;span class="hljs-keyword"&gt;using&lt;/span&gt; &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; textReader = input.GetContentTextReader();
        &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; content = &lt;span class="hljs-keyword"&gt;await&lt;/span&gt; textReader.ReadToEndAsync();

        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; input.Clone(
                &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; MetadataItems
                {
                    { MetaDataKeys.ReadingTime, _readingTimeService.GetReadingTime(content, context.GetInt("ReadingTimeWordsPerMinute", &lt;span class="hljs-number"&gt;200&lt;/span&gt;)) }
                })
            .Yield();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 5-6&lt;/em&gt;&lt;/strong&gt;: Get the content associated with the document as a string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 8&lt;/em&gt;&lt;/strong&gt;: Clone the document by adding new metadata items.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 10-11&lt;/em&gt;&lt;/strong&gt;: Add a new metadata item with key &lt;em&gt;Reading_time_and a value obtained from a call to &lt;code&gt;GetReadingTime&lt;/code&gt;. We use a _ReadingTimeWordsPerMinute&lt;/em&gt; setting to override the default value of 200 words per minute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 11&lt;/em&gt;&lt;/strong&gt;: Convert the document into an enumerable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can now use it on our website. You can see an example below.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.ankursheel.com/assets/images/posts/add-estimated-reading-time-posts-statiq/cover_orig.png" alt="Reading time example"&gt;&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.statiq.dev/framework/pipelines/modules/writing-modules"&gt;Writing Modules in Statiq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to calculate reading time</title>
			<link>https://www.ankursheel.com/blog/calculate-reading-time</link>
			<description>A guide to calculating the reading time for a given document</description>
			<guid>https://www.ankursheel.com/blog/calculate-reading-time</guid>
			<pubDate>Thu, 07 Oct 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;In this snippet, I will be showing how to calculate the reading time for a given string.&lt;/p&gt;
&lt;p&gt;First, we will create a new data structure to hold the reading time. It contains the number of words and the minutes and seconds to read the post.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; record ReadingTimeData
{
    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-title"&gt;ReadingTimeData&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; minutes, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; seconds, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; words&lt;/span&gt;)
    &lt;/span&gt;{
        Minutes = minutes;
        Seconds = seconds;
        Words = words;
    }

    &lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; Minutes { &lt;span class="hljs-keyword"&gt;get&lt;/span&gt;; }

    &lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; Seconds { &lt;span class="hljs-keyword"&gt;get&lt;/span&gt;; }

    &lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; Words { &lt;span class="hljs-keyword"&gt;get&lt;/span&gt;; }

    &lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; RoundedMinutes
        =&amp;gt; Seconds &amp;lt; &lt;span class="hljs-number"&gt;30&lt;/span&gt;
            ? Minutes
            : Minutes + &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;RoundedMinutes&lt;/em&gt;&lt;/strong&gt; is the rounded time to make things simpler for a reader. Anything less than 30 seconds gets ignored, and anything more than 30 seconds gets rounded up to the next minute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, we can calculate the reading time and fill in the ReadingTimeData.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; ReadingTimeData &lt;span class="hljs-title"&gt;GetReadingTime&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;string&lt;/span&gt; content, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; wordsPerMinute&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;const&lt;/span&gt; Regex SpacesRegex = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Regex(&amp;quot;\S+&amp;quot;, RegexOptions.Multiline);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; words = SpacesRegex.Matches(content).Count;

    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; minutes = words / WordsPerMinute;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; remainingWords = words % WordsPerMinute;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; seconds = remainingWords * &lt;span class="hljs-number"&gt;60&lt;/span&gt; / WordsPerMinute;

    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ReadingTimeData(minutes, seconds, words);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 3-4&lt;/em&gt;&lt;/strong&gt;: Get all the words in the string by using &lt;code&gt;\S&lt;/code&gt; as our regex expression, which matches all characters that are not a white space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 6&lt;/em&gt;&lt;/strong&gt;: Get the number of minutes it takes to read the string based on how many words we can read in a minute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 7&lt;/em&gt;&lt;/strong&gt;: Get the number of unread words which we weren't able to read in a full minute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 8&lt;/em&gt;&lt;/strong&gt;: Get the number of seconds to read the remaining text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concusion"&gt;Concusion&lt;/h2&gt;
&lt;p&gt;Now, we can show the estimated reading time on our articles.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to Upload Multiple Files to AWS S3 using Terraform</title>
			<link>https://www.ankursheel.com/blog/upload-multiple-files-aws-s3-terraform</link>
			<description>A snippet to upload multiples files from a specific folder (recursively) to AWS S3 using terraform</description>
			<guid>https://www.ankursheel.com/blog/upload-multiple-files-aws-s3-terraform</guid>
			<pubDate>Thu, 30 Sep 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;I want to upload multiple files from a specific folder to an AWS S3 bucket.&lt;/p&gt;
&lt;h3 id="assumptions"&gt;Assumptions&lt;/h3&gt;
&lt;p&gt;The S3 bucket name is &lt;strong&gt;test&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The directory structure is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;documents
|- file_1
|- subdirectory1
|  |- file_1_1
|  |- file_1_2
|  |- subdirectory2
|  |  |- file_1_2_1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to end up with the following S3 objects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s3://test/file_1&lt;/li&gt;
&lt;li&gt;s3://test/subdirectory1/file_1_1&lt;/li&gt;
&lt;li&gt;s3://test/subdirectory1/file_1_2&lt;/li&gt;
&lt;li&gt;s3://test/subdirectory1/subdirectory2/file_1_2_1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-hcl"&gt;resource &amp;quot;aws_s3_bucket_object&amp;quot; &amp;quot;test&amp;quot; {
  for_each = fileset(&amp;quot;./documents/&amp;quot;, &amp;quot;**&amp;quot;)
  bucket = &amp;quot;test&amp;quot;
  key = each.value
  source = &amp;quot;./documents/${each.value}&amp;quot;
  etag = filemd5(&amp;quot;./documents/${each.value}&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 1&lt;/em&gt;:&lt;/strong&gt;: Create an S3 bucket object resource.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 2&lt;/em&gt;:&lt;/strong&gt;: Use a &lt;strong&gt;&lt;em&gt;for_each&lt;/em&gt;&lt;/strong&gt; argument to iterate over the documents returned by the &lt;strong&gt;&lt;em&gt;fileset&lt;/em&gt;&lt;/strong&gt; function. &lt;strong&gt;&lt;em&gt;for_each&lt;/em&gt;&lt;/strong&gt; identifies each resource instance by its S3 path, making it easy to add/remove files. The fileset function enumerates over a set of filenames for a given path. It uses &lt;strong&gt;&lt;em&gt;**&lt;/em&gt;&lt;/strong&gt; as the pattern for a recursive search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 3&lt;/em&gt;:&lt;/strong&gt;: The name of the bucket to put the files in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 4&lt;/em&gt;:&lt;/strong&gt;: The object's name once it's in the bucket. In the example above, it is the same as the path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 5&lt;/em&gt;:&lt;/strong&gt;: the Path to the file to be uploaded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Line 6&lt;/em&gt;:&lt;/strong&gt;: Triggers an update only if the file changes. The eTag of each object is an MD5 hash of that object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_object"&gt;Resource: aws_s3_bucket_object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/docs/language/meta-arguments/for_each.html"&gt;for_each&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/docs/language/functions/fileset.html"&gt;fileset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to replace a pipeline in Statiq</title>
			<link>https://www.ankursheel.com/blog/replace-pipeline-statiq</link>
			<description>A guide to replacing a pipeline in Statiq</description>
			<guid>https://www.ankursheel.com/blog/replace-pipeline-statiq</guid>
			<pubDate>Thu, 23 Sep 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this article, I will be showing how we can replace a pipeline in &lt;a href="https://www.statiq.dev/web/"&gt;Statiq&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a href="https://www.ankursheel.com/migrating-gatsby-statiq"&gt;migration from Gatsby to Statiq&lt;/a&gt;, I wanted to replace the Assets and Content pipeline to control the files, strongly type the model passed to the razor module and also set some metadata based on the parent folder.&lt;/p&gt;
&lt;p&gt;Statiq.Web provides quite a few pipelines out of the box. However, it processes different file types by using Templates that define a specific module for that type. Statiq.Web has a nice fluent syntax to modify and remove templates.&lt;/p&gt;
&lt;p&gt;In most cases, this would be fine, but sometimes it's much easier to replace the whole pipeline.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;To remove a pipeline, we can use&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;bootstrapper.ConfigureEngine(
    engine =&amp;gt;
    {
        engine.Pipelines.Remove(&lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(Assets));
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To replace it with an empty pipeline, we can use&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;bootstrapper.ConfigureEngine(
    engine =&amp;gt;
    {
        engine.Pipelines.Add(&lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(Assets), &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Pipeline());
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To replace a pipeline, we can remove it and add it again with a new pipeline.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;bootstrapper.ConfigureEngine(
    engine =&amp;gt;
    {
        engine.Pipelines.Remove(&lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(AnalyzeContent));
        engine.Pipelines.Add(
            &lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(AnalyzeContent),
            &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Pipeline
            {
                InputModules =
                {
                    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ReplaceDocuments(
                        &lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(PostPipeline),
                        &lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(Content),
                        &lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(Archives),
                        &lt;span class="hljs-keyword"&gt;nameof&lt;/span&gt;(Assets))
                }
            });
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now, we can remove/replace the pipelines that we don't want to use. Dave Glick, the creator of Statiq, has mentioned that he will provide a fluent syntax to replace pipelines in the next release, so hopefully, we won't need this for too long.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can see the original issue I created &lt;a href="https://github.com/statiqdev/Statiq.Web/issues/962"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Deploy a Statiq website using Tailwind CSS to Netlify</title>
			<link>https://www.ankursheel.com/blog/deploy-statiq-website-tailwind-netlify</link>
			<description>A guide to installing Tailwind CSS on deploying a Statiq website</description>
			<guid>https://www.ankursheel.com/blog/deploy-statiq-website-tailwind-netlify</guid>
			<pubDate>Thu, 16 Sep 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this article, I will be showing how we can deploy a website built with &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; and &lt;a href="https://www.statiq.dev/web/"&gt;Statiq&lt;/a&gt; on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a href="https://www.ankursheel.com/migrating-gatsby-statiq"&gt;migration from Gatsby to Statiq&lt;/a&gt;, I wanted to deploy my website built with Statiq and Tailwind to Netlify. Netlify allows for only one build command on deployment. The issue is that Tailwind is available as an npm package while Statiq is a .Net solution, and hence both require different commands to run.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;There are a few ways to do this, but since Statiq Web supports running external processes as part of execution, we will leverage that to install the npm packages and build our statiq website.&lt;/p&gt;
&lt;h3 id="step-1-get-the-directories"&gt;Step 1: Get the directories&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; currentDirectory = Directory.GetCurrentDirectory();
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; nodeDirectory = Path.Combine(currentDirectory, "..", "node");
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; inputDirectory = Path.Combine(currentDirectory, "input");
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 1&lt;/strong&gt;: Get the current directory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 2&lt;/strong&gt;: My npm packages and configs are stored in a node folder, so I need to get the node directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Get the input directory where all the razor views are stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="step-2-install-the-npm-packages"&gt;Step 2: Install the npm packages&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;bootstrapper.AddProcess(
    ProcessTiming.Initialization,
    _ =&amp;gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ProcessLauncher("npm", "install")
    {
        LogErrors = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;,
        WorkingDirectory = nodeDirectory
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 1&lt;/strong&gt;: Adds a new process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 2&lt;/strong&gt;: Configures the process to run only once on initialization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Creates a new process launcher to install the npm packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 5&lt;/strong&gt;: Ignore errors from npm that would fail the build.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: Set the working directory to the node directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="step-3-compile-css-with-tailwind"&gt;Step 3: Compile CSS with Tailwind&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-csharp hljs"&gt;bootstrapper.AddProcess(
    ProcessTiming.Initialization,
   _ =&amp;gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ProcessLauncher("npx", "tailwind", "build",
    $"-i {Path.Combine(inputDirectory, "_site.css")}",
    $"-o {Path.Combine(currentDirectory, "output", "styles.css")}")
{
    LogErrors = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;,
    WorkingDirectory = nodeDirectory
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Use npx to generate a fully compiled Tailwind CSS file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 4&lt;/strong&gt;: Set the input path of the custom CSS file to &lt;em&gt;_site.css&lt;/em&gt; in the input directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 5&lt;/strong&gt;: Set the path for compiled CSS to the output directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now, as part of building the statiq website, the CSS will be generated on each deployment.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Add Tailwind CSS to a Statiq website</title>
			<link>https://www.ankursheel.com/blog/add-tailwind-css-statiq-website</link>
			<description>A guide to using TailwindCss with Statiq</description>
			<guid>https://www.ankursheel.com/blog/add-tailwind-css-statiq-website</guid>
			<pubDate>Thu, 09 Sep 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this article, I will be showing how we can integrate &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; with &lt;a href="https://www.statiq.dev/web/"&gt;Statiq&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a href="https://www.ankursheel.com/migrating-gatsby-statiq"&gt;migration from Gatsby to Statiq&lt;/a&gt;, I wanted to use Tailwind with Statiq. Tailwind is available as an NPM package, while Statiq is a .Net solution.&lt;/p&gt;
&lt;p&gt;Many articles out there discuss the pros and cons of using Tailwind so that I won't be doing that. All I will be saying is that Tailwind is a utility first framework with what might be considered an ugly-as syntax, but boy is it faster to build elegant components.&lt;/p&gt;
&lt;h2 id="preresiquites"&gt;Preresiquites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://nodejs.org/en/"&gt;Node and npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://dotnet.microsoft.com/"&gt;.Net Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://www.statiq.dev/web/"&gt;.Net Core Console Application configured to use Statiq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-tailwind"&gt;Install Tailwind&lt;/h2&gt;
&lt;p&gt;Tailwind can only be installed as an NPM package.&lt;/p&gt;
&lt;h3 id="step-1-create-a-folder-called-node"&gt;Step 1: Create a folder called node&lt;/h3&gt;
&lt;p&gt;Because our core project is a .Net Core application, and we don't need npm except for Tailwind, we will install it in a separate folder. This will avoid clutter in the root directory.&lt;/p&gt;
&lt;h3 id="step-2-install-packages"&gt;Step 2: Install packages&lt;/h3&gt;
&lt;p&gt;We will install Tailwind, and other peer dependencies inside a directory called &lt;em&gt;node&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;&lt;span class="hljs-built_in"&gt;cd&lt;/span&gt; node
npm install -D tailwindcss&amp;amp;&lt;span class="hljs-comment"&gt;#64;latest postcss@latest autoprefixer@latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PostCSS&lt;/strong&gt; is a preprocessor that transforms the CSS using plugins.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AuoPrefixer&lt;/strong&gt; is a PostCSS plugin to add vendor prefixes to CSS rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our package.json should look something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json hljs"&gt;{
    "devDependencies": {
        "@@tailwindcss/typography": "^0.4.1",
        "autoprefixer": "^10.3.1",
        "postcss": "^8.3.6",
        "tailwindcss": "^2.2.7"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="step-3-configure-postcss"&gt;Step 3: Configure postcss&lt;/h3&gt;
&lt;p&gt;Create a postcss.config.js file and add &lt;em&gt;tailwindcss&lt;/em&gt; and &lt;em&gt;autoprefixer&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript hljs"&gt;&lt;span class="hljs-built_in"&gt;module&lt;/span&gt;.exports = {
    &lt;span class="hljs-attr"&gt;plugins&lt;/span&gt;: {
        &lt;span class="hljs-attr"&gt;tailwindcss&lt;/span&gt;: {},
        &lt;span class="hljs-attr"&gt;autoprefixer&lt;/span&gt;: {},
    },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="step-3-configure-tailwind"&gt;Step 3: Configure Tailwind&lt;/h3&gt;
&lt;p&gt;Generate a config file using the Tailwind CLI utility&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a tailwind.config.js file.&lt;/p&gt;
&lt;p&gt;We will update the purge section to optimize our CSS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js hljs"&gt;    purge: {
        &lt;span class="hljs-attr"&gt;enabled&lt;/span&gt;: &lt;span class="hljs-literal"&gt;true&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;content&lt;/span&gt;: [&lt;span class="hljs-string"&gt;'../**/input/**/*.cshtml'&lt;/span&gt;],
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 2&lt;/strong&gt;: Enable purge without having to set the NODE_ENV to production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Scan our razor views files and remove any superfluous CSS from our final output file. We prefix the path with &lt;strong&gt;../&lt;/strong&gt; because our config is inside a subfolder, and we need to find the razor views from the root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our final configuration will look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js hljs"&gt;&lt;span class="hljs-built_in"&gt;module&lt;/span&gt;.exports = {
    &lt;span class="hljs-attr"&gt;purge&lt;/span&gt;: {
        &lt;span class="hljs-attr"&gt;enabled&lt;/span&gt;: &lt;span class="hljs-literal"&gt;true&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;content&lt;/span&gt;: [&lt;span class="hljs-string"&gt;'../**/input/**/*.cshtml'&lt;/span&gt;],
    },
    &lt;span class="hljs-attr"&gt;darkMode&lt;/span&gt;: &lt;span class="hljs-literal"&gt;false&lt;/span&gt;, &lt;span class="hljs-comment"&gt;// or 'media' or 'class'&lt;/span&gt;
    theme: {
        &lt;span class="hljs-attr"&gt;extend&lt;/span&gt;: {},
    },
    &lt;span class="hljs-attr"&gt;variants&lt;/span&gt;: {
        &lt;span class="hljs-attr"&gt;extend&lt;/span&gt;: {},
    },
    &lt;span class="hljs-attr"&gt;plugins&lt;/span&gt;: [],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="step-4-add-css"&gt;Step 4: Add CSS&lt;/h3&gt;
&lt;p&gt;Create an input folder and add a _site.css&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-css hljs"&gt;&lt;span class="hljs-comment"&gt;/*! @@import */&lt;/span&gt;
&amp;amp;&lt;span class="hljs-selector-id"&gt;#64&lt;/span&gt;;&amp;amp;&lt;span class="hljs-selector-id"&gt;#64&lt;/span&gt;;&lt;span class="hljs-selector-tag"&gt;tailwind&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;base&lt;/span&gt;;
&amp;amp;&lt;span class="hljs-selector-id"&gt;#64&lt;/span&gt;;&amp;amp;&lt;span class="hljs-selector-id"&gt;#64&lt;/span&gt;;&lt;span class="hljs-selector-tag"&gt;tailwind&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;components&lt;/span&gt;;
&amp;amp;&lt;span class="hljs-selector-id"&gt;#64&lt;/span&gt;;&amp;amp;&lt;span class="hljs-selector-id"&gt;#64&lt;/span&gt;;&lt;span class="hljs-selector-tag"&gt;tailwind&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;utilities&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="step-5-build-the-css"&gt;Step 5: Build the CSS&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;npx tailwind build -c ./tailwind.config.js -i ../input/_site.css -o ../Bookland/output/assets/styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-c&lt;/strong&gt;: The config file path&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-i&lt;/strong&gt;: The input file path. Our CSS file is in the input folder and called _site.css&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-o&lt;/strong&gt;: The output file path. Our output file is in the output folder and called styles.css&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="step-6-link-the-stylesheet-to-a-layout-file"&gt;Step 6: Link the stylesheet to a layout file&lt;/h3&gt;
&lt;p&gt;We will add a _Layout.cshtml file in our input folder and link to the stylesheet generated by tailwind and postcss.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs hljs"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link href="/styles.css" rel="stylesheet"/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;amp;&lt;span class="hljs-meta"&gt;#64;@RenderBody()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Reference to the styles.css file&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now we should be able to add Tailwind classes to our Razor view. The generated site will use the styles outputted by Tailwind.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs"&gt;Tailwind Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to rename multiple files in subfolders using Windows command prompt</title>
			<link>https://www.ankursheel.com/blog/rename-multiple-files-subfolders-windows-command-prompt</link>
			<description>A single command to update the file extensions for files in all the subfolders using a single command in Windows command prompt</description>
			<guid>https://www.ankursheel.com/blog/rename-multiple-files-subfolders-windows-command-prompt</guid>
			<pubDate>Mon, 30 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a href="https://www.ankursheel.com/migrating-gatsby-statiq"&gt;migration from Gatsby to Statiq&lt;/a&gt;, I had to rename all the files with the extension &lt;em&gt;mdx&lt;/em&gt; to &lt;em&gt;md&lt;/em&gt;. Now, I could do it one by one or find a utility but using a single command is more elegant.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;To rename all the files recursively, we can use the REN (rename) command as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash hljs"&gt;FOR /R %G IN (*.mdx) DO REN "%G" "%~dpnG.md"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's unpack this command.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FOR&lt;/strong&gt;: Loops through files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/R&lt;/strong&gt;: Recurse through subfolders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%G&lt;/strong&gt;: A parameter set to a different value for each iteration of the for loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(*.mdx)&lt;/strong&gt;: The filename pattern that we want to match.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REN&lt;/strong&gt;: The command to rename a file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%~dpnG"&lt;/strong&gt;: Expands the parameter of the original filename to the fully qualified path without the extension&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ss64.com/nt/for_r.html"&gt;FOR /R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ss64.com/nt/ren.html"&gt;REN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ss64.com/nt/syntax-args.html"&gt;Command Line arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>