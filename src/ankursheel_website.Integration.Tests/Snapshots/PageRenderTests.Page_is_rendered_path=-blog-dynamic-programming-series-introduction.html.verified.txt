<!DOCTYPE html><html lang="en" class="min-h-screen"><head>
    

<title>A guide to getting started with Dynamic Programming - Ankur Sheel</title>
<meta charset="utf-8">


<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution.">
<link href="/assets/styles.css" rel="stylesheet">
<link href="/assets/code-styles/obsidian.min.css" rel="stylesheet">
    <link rel="canonical" href="https://www.ankursheel.com/blog/dynamic-programming-series-introduction">   
<meta itemprop="name" content="A guide to getting started with Dynamic Programming">
<meta itemprop="description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution.">
    <meta itemprop="image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png">
<meta property="og:url" content="https://www.ankursheel.com/blog/dynamic-programming-series-introduction">
<meta property="og:type" content="article">
<meta property="og:title" content="A guide to getting started with Dynamic Programming">
<meta property="og:description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution.">
    <meta property="og:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png">
    <meta property="og:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="ankur_sheel">
<meta name="twitter:creator" content="ankur_sheel">
<meta name="twitter:title" content="A guide to getting started with Dynamic Programming">
<meta name="twitter:description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution.">
    <meta name="twitter:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-twitter.png">
    <meta name="twitter:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-twitter.png">

</head>
<body class="font-sans font-normal leading-relaxed font-base text-gray-800 min-h-screen bg-gray-100">
<noscript>
        <img src="https://ankursheel.goatcounter.com/count?p=/test-noscript">
</noscript>

<header class="sticky top-0 bg-white shadow-lg z-10 w-full">
    
<nav x-data="{ open: false }" class="flex flex-col max-w-screen-xl px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-6 md:px-8">
    <div class="p-4 flex flex-row items-center justify-between font-semibold">
        <a href="/" class="navigation-link text-lg hover:invert-0 text-gray-900 uppercase rounded-lg focus:outline-none">Ankur Sheel</a>
        <button class="md:hidden rounded-lg focus:outline-none focus:shadow-outline" x-on:click="open = !open">
            <svg fill="currentColor" viewBox="0 0 20 20" class="w-6 h-6">
                <path x-show="!open" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                <path x-show="open" fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
        </button>
    </div>
    <ul :class="{'flex': open, 'hidden': !open}" class="flex-col flex-grow pb-4 md:pb-0 hidden md:flex md:justify-end md:flex-row">
        

    <li class="navigation-link">
            <div x-on:click.away="open = false" class="relative" x-data="{ open: false }">
                <button x-on:click="open = !open" class="flex flex-row items-center w-full text-left bg-transparent font-semibold md:w-auto md:inline md:ml-4 hover:text-gray-900">
                    <span>About</span>
                    <svg fill="currentColor" viewBox="0 0 20 20" :class="{'rotate-180': open, 'rotate-0': !open}" class="inline w-4 h-4 mt-1 ml-1 transition-transform duration-200 transform md:-mt-1">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
                <div x-show="open" x-transition:enter="transition ease-out duration-100" x-transition:enter-start="transform opacity-0 scale-95" x-transition:enter-end="transform opacity-100 scale-100" x-transition:leave="transition ease-in duration-75" x-transition:leave-start="transform opacity-100 scale-100" x-transition:leave-end="transform opacity-0 scale-95" class="absolute right-0 w-full mt-2 origin-top-right rounded-md shadow-lg md:w-48">
                    <div class="px-2 py-2 bg-white rounded-md shadow">
                                    <a class="block hover:invert-0 navigation-link" href="/about">About</a>
                                    <a class="block hover:invert-0 navigation-link" href="/impossible-list">Impossible List</a>
                                    <a class="block hover:invert-0 navigation-link" href="https://www.discoveriesinbookland.com/" target="_blank">Book Summaries</a>
                    </div>
                </div>
            </div>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/blog">Blog</a>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/tags">Tags</a>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/cv">CV</a>
    </li>
    <li class="navigation-link">
                <a class="hover:invert-0" href="/contact">Contact</a>
    </li>

    </ul>
</nav>

</header>

<main class="mx-auto max-w-prose p-4 prose prose-xl prose-purple">
    <h1 class="text-center">A guide to getting started with Dynamic Programming</h1>
    <div class="flex flex-col min-h-screen">
        <article class="prose-code:bg-slate-400">
            

<div class="prose-sm italic ">
    <div class="flex justify-evenly items-center">
        <span>Last Updated: <time datetime="2017-03-27">March 27, 2017</time></span>
        <i class="font-bold">
            Reading Time: 7 min
        </i>
    </div>

    <div class="flex flex-row flex-wrap gap-1 place-content-center">
            <a href="/tags/cpp" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">cpp</a>
            <a href="/tags/dynamic-programming" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">dynamic programming</a>
            <a href="/tags/tutorial" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">tutorial</a>
    </div>
</div>

<p>Dynamic Programming is one of those techniques that every programmer should have in their toolbox. But, it is also confusing for a lot of people.</p>
<p>For a long time, I struggled to grasp how to apply Dynamic Programming to problems. Most articles that I could find on the internet gave the final dynamic programming solution without actually showing the approach taken to arrive at the final solution.</p>
<p>This article will show the benefits of using a Dynamic Programming approach to solving problems with an example. In the end, I will show some steps you can use to find a Dynamic Programming solution.</p>
<p>Hopefully, after reading this article, you will find Dynamic Programming intuitive and straightforward.</p>
<h2 id="what-is-dynamic-programming">What is Dynamic Programming?</h2>
<p>Dynamic programming is an efficient method for solving specific types of complicated computational problems. These problems are generally those that can be broken down into smaller overlapping sub-problems. It can be characterised basically as recursion along with memoization.</p>
<p>Memoization is the ability to save the results of specific states to reuse later.</p>
<h2 id="profiling">Profiling</h2>
<p>To prove that we are improving our solution, we need statistics that we can compare. I will be using <a href="https://github.com/google/benchmark">google benchmark</a> to help profile our solutions. The benchmark will look like this.</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------
Benchmark Name   Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------
</code></pre>
<ol>
<li><strong>Benchmark Name:</strong> The name of the benchmark. It will be in the format the FunctionName/value is passed in.</li>
<li><strong>Running Time</strong>: The time it took for our function to return a result.</li>
<li><strong>Iterations/sec</strong>: The number of times the function could be invoked in 1 second.</li>
<li><strong>Items/sec:</strong> The number of items that were processed in 1 second.</li>
</ol>
<p>While 2 and 3 will indicate the time complexity of the function, 4 will provide us with the space complexity.</p>
<h2 id="example-fibonacci-series">Example: Fibonacci Series</h2>
<p>The classic example to explain dynamic programming is the <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci computation</a> which can be formalised as follows</p>
<pre><code class="language-ini hljs">Fibonacci(n) = 0; if n = 0
Fibonacci(n) = 1; if n = 1
Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) ; if n &gt;=2
</code></pre>
<h3 id="naive-recursive-approach">Naive Recursive Approach</h3>
<p>The Fibonacci sequence can easily be solved by the following recursive method:</p>
<pre><code class="language-cpp hljs"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">return</span> Fibonacci(n - <span class="hljs-number">2</span>) + Fibonacci(n - <span class="hljs-number">1</span>);
}
</code></pre>
<p>On running the above code and profiling it on my machine, I get:</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciRecursive/10                 0 ms         2488889          17.0685M
FibonacciRecursive/20                 0 ms           21333          303.026k
FibonacciRecursive/30                 8 ms             179          3.60887k
FibonacciRecursive/40               997 ms               1                40
FibonacciRecursive/50            124510 ms               1           0.40282
</code></pre>
<p>Although this method returns almost instantly for <strong>n &lt;= 30</strong>, it takes a little less than a second for <strong>n = 40</strong> and approximately 2 minutes for <strong>n = 50</strong>. Why is the amount of running time increasing so rapidly? This can be explained easily by following the execution stack. Let's do this for <strong>n = 6</strong> to keep it simple. The following image shows the sequence of calls that are made.</p>
<p><img src="/assets/images/posts/dynamic-programming-series-introduction/cover.png" alt="Fibonacci Series"></p>
<p>Looking at the image, we can see that to calculate <em>fibonacci(6)</em>, we calculate</p>
<ul>
<li><em>fibonacci(5)</em> 1 time</li>
<li><em>fibonacci(4)</em> 2 times,</li>
<li><em>fibonacci(3)</em> 3 times,</li>
<li><em>fibonacci(2)</em> 5 times,</li>
<li><em>fibonacci(1)</em> 8 times; and</li>
<li><em>fibonacci(0)</em> 5 times.</li>
</ul>
<p>Throughout the call-stack, we are repeatedly computing values that we have already computed. This amount of duplicated work being done keeps on increasing as <em><strong>n</strong></em> becomes larger.</p>
<p>You must have realised that this solution is not at all scalable. If you are thinking that there has to be a better way, you are correct.</p>
<h3 id="top-down-recursive-approach-with-memoization">Top-Down Recursive approach with Memoization</h3>
<p>The 1st step to improving the above solution is to add memoization, i.e. to store the previously computed values in a data structure. Although you can use any data structure that you like, I will use a map for the purposes of this example.</p>
<pre><code class="language-cpp hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciMemonized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-keyword">long</span>&gt; computedValues;
    computedValues.insert(make_pair(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));
    computedValues.insert(make_pair(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));
    <span class="hljs-keyword">return</span> FibonacciMemonized(n, computedValues);
}

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciMemonized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-keyword">long</span>&gt;&amp; computedValues)</span>
</span>{
    <span class="hljs-keyword">if</span> (computedValues.find(n) != computedValues.end())
    {
        <span class="hljs-keyword">return</span> computedValues[n];
    }
    <span class="hljs-keyword">long</span> newValue = (FibonacciMemonized(n - <span class="hljs-number">1</span>, computedValues) + FibonacciMemonized(n - <span class="hljs-number">2</span>, computedValues)) % MOD;
    computedValues.insert(make_pair(n, newValue));
    <span class="hljs-keyword">return</span> newValue;
}
</code></pre>
<p>The top method is our main method. It adds the 2 base cases to a map and then calls the bottom method with the map as one of the arguments.</p>
<p>This bottom method is our recursive method. In this method, we check if the map contains the computed value. If it does, we just return that value. Otherwise, we calculate the value for <em><strong>n-1</strong></em> and <strong><em>n-2</em></strong>.</p>
<p>We mod the result using <strong>1000000007</strong> to avoid overflows. Before returning their sum, we store the value in our map.</p>
<p>How better is this version? Let's look at the benchmark results.</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciMemonized/1000               0 ms            4073          3.60284M
FibonacciMemonized/5000               2 ms             896          2.90891M
FibonacciMemonized/10000              3 ms             407          2.82288M
FibonacciMemonized/15000              5 ms             242          2.66937M
FibonacciMemonized/20000              7 ms             187          2.65432M
</code></pre>
<p>We can see that we have reduced the amount of time drastically. Even for <strong>n = 20000</strong>, the result is instantaneous.</p>
<p>However, there is a problem with this approach. Can you spot it?</p>
<p>If you said memory usage, you are absolutely correct. Although the new version is much faster, it is still a recursive algorithm.</p>
<p>And, the problem with recursive algorithms is that each recursive call takes some space on the stack. A high enough <strong>n</strong>, and we run the risk of running out of memory.</p>
<p>Let's see why this happens with an example where <strong>n = 100</strong>. Because we don't have the result when we start, we call the method recursively for 999, 998, 997 ... 1. At that point, we have all the computed results in our map.</p>
<p>As we return from our recursive functions, we just look up the value in the table and return it. So, even though we have reduced the number of recursive calls, we still make <strong>n</strong> recursive calls before getting our initial result. This can easily be seen by comparing the iteration/seconds between this and the previous algorithm.</p>
<p>Let's try something better.</p>
<h3 id="bottom-up-approach-with-dynamic-programming">Bottom-Up Approach with Dynamic Programming</h3>
<p>In the previous approach, our main problem was the recursive nature of our algorithm. Let's see if we can get rid of it by using an iterative approach.</p>
<p>How do we do this? Instead of starting from the final value, we will begin with the smallest value of <strong>n</strong> and build up the results.</p>
<pre><code class="language-cpp hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciDP</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">long</span>* results = <span class="hljs-keyword">new</span> <span class="hljs-keyword">long</span>[n + <span class="hljs-number">1</span>];
    results[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;
    results[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)
    {
        results[i] = (results[i - <span class="hljs-number">1</span>] + results[i - <span class="hljs-number">2</span>]) % MOD;
    }
    <span class="hljs-keyword">long</span> value = results[n];
    <span class="hljs-keyword">delete</span>[] results;
    <span class="hljs-keyword">return</span> value;
}
</code></pre>
<p>In the above function, we have an array of <strong>n+1</strong> to store the results. We initialise the array for our base cases of <strong>n=0</strong> and <strong>n=1</strong> and then iterate from <strong>2</strong> to <strong>n</strong>. At each step, we can use the 2 previously computed values and finally return the result.</p>
<p>Let's again look at the benchmark results to see how does this approach do?</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciDP/100000                    1 ms            1906          130.711M
FibonacciDP/600000                    5 ms             280          111.456M
FibonacciDP/1100000                  10 ms             145          110.626M
FibonacciDP/1600000                  14 ms             100          112.249M
FibonacciDP/2100000                  18 ms              81          110.448M
</code></pre>
<p>Even when <strong>n=210,000</strong>, this approach returns almost instantly. At the same time, since this algorithm is not recursive in nature, we have drastically reduced the required amount of space. We can see this by comparing the items/sec, which decreases much slower even though <strong>n</strong> is increasing more rapidly than before.</p>
<p>You may be thinking that since we have a linear time and space complexity, this is the end.</p>
<p>In most cases, that would be true. But, in this case, we can optimise our solution further.</p>
<h3 id="bottom-up-approach-with-dynamic-programming-optimised">Bottom-Up Approach with Dynamic Programming (Optimised)</h3>
<p>In the last algorithm, the amount of space required is proportional to <strong>n</strong>. This is because we are storing all the results. But, we don't need to keep all of them.</p>
<p>Let's eliminate the array by using just 3 variables - 2 to store the previous results and 1 to store the current result.</p>
<pre><code class="language-cpp hljs">    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciDPOptimized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">long</span> n1 = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">long</span> n2 = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">long</span> current = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)
    {
        current = (n1 + n2) % MOD;
        n1 = n2;
        n2 = current;
    }
    <span class="hljs-keyword">return</span> current;
}
</code></pre>
<p>Although this algorithm is doing precisely the same thing as the previous one, we have reduced our space complexity to be constant since the amount of space needed is no longer dependent on <strong>n</strong>.</p>
<p>Again the benchmark results for comparison.</p>
<pre><code class="language-ini hljs">----------------------------------------------------------------------------------
Benchmark Name                    Running Time   Iterations/sec        Items/sec
----------------------------------------------------------------------------------
FibonacciDPOptimized/100000                0 ms            2987          202.569M
FibonacciDPOptimized/600000                3 ms             498          207.242M
FibonacciDPOptimized/1100000               5 ms             280          202.138M
FibonacciDPOptimized/1600000               7 ms             187          205.188M
FibonacciDPOptimized/2100000               10 ms            128          205.0708M
</code></pre>
<p>Here, we can see that although <strong>n</strong> is increasing, the items/sec is more or less the same.</p>
<p>This is the best we can do, and no further optimisations are possible.</p>
<h2 id="conclusion">Conclusion</h2>
<p>From the above example, we can see that we only need to identify overlapping subproblems and then avoid duplicated work by caching the computed results.</p>
<p>To recap, we can use these steps to find a dynamic programming approach to our problem.</p>
<ol>
<li>Find the overlapping subproblem.</li>
<li>Start with a recursive solution</li>
<li>Modify the recursive solution to use a top-down memoized version.</li>
<li>Remove the recursion by making it an iterative solution.</li>
<li>If you don't need to keep all the previous results, keep only the required ones.</li>
</ol>
<p>If you would like to run the code yourself, you can find the code <a href="https://github.com/AnkurSheel/DynamicProgramming">here</a>.</p>
<p>Hopefully, this article has removed the mystery around Dynamic Programming.</p>
<p>In the following few articles in the series, we will look at some of the more common problems that can be solved by Dynamic Programming and use the above steps to come up with a solution.</p>
<p>Have you tried Dynamic Programming before? How was your experience? Let me know.</p>




<aside class="m-2">
    <div class="my-6 flex justify-center gap-5 flex-wrap">
        <a class="bg-social-twitter social-button" href="https://twitter.com/intent/tweet?url=https://www.ankursheel.com/blog/dynamic-programming-series-introduction&amp;text=A%20guide%20to%20getting%20started%20with%20Dynamic%20Programming via @ankur_sheel.&amp;#xD;&amp;#xA;In%20this%20article%2C%20I%20will%20show%20the%20advantages%20of%20using%20a%20Dynamic%20Programming%20approach.%20Using%20an%20example%2C%20we%20will%20come%20up%20with%20an%20approach%20to%20find%20a%20DP%20solution." onclick="window.open(this.href, 'twitter-share', 'width=550,height=235'); return false;">Share on Twitter</a>
        <a class="inline-flex items-center flex-nowrap social-button bg-green-400" target="_blank" rel="noopener noreferrer" href="https://www.buymeacoffee.com/ankursheel">
            <svg class="h-8 mr-2" viewBox="0 0 884 1279" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M791.109 297.518L790.231 297.002L788.201 296.383C789.018 297.072 790.04 297.472 791.109 297.518V297.518Z" fill="#0D0C22"></path>
                <path d="M803.896 388.891L802.916 389.166L803.896 388.891Z" fill="#0D0C22"></path>
                <path d="M791.484 297.377C791.359 297.361 791.237 297.332 791.118 297.29C791.111 297.371 791.111 297.453 791.118 297.534C791.252 297.516 791.379 297.462 791.484 297.377V297.377Z" fill="#0D0C22"></path>
                <path d="M791.113 297.529H791.244V297.447L791.113 297.529Z" fill="#0D0C22"></path>
                <path d="M803.111 388.726L804.591 387.883L805.142 387.573L805.641 387.04C804.702 387.444 803.846 388.016 803.111 388.726V388.726Z" fill="#0D0C22"></path>
                <path d="M793.669 299.515L792.223 298.138L791.243 297.605C791.77 298.535 792.641 299.221 793.669 299.515V299.515Z" fill="#0D0C22"></path>
                <path d="M430.019 1186.18C428.864 1186.68 427.852 1187.46 427.076 1188.45L427.988 1187.87C428.608 1187.3 429.485 1186.63 430.019 1186.18Z" fill="#0D0C22"></path>
                <path d="M641.187 1144.63C641.187 1143.33 640.551 1143.57 640.705 1148.21C640.705 1147.84 640.86 1147.46 640.929 1147.1C641.015 1146.27 641.084 1145.46 641.187 1144.63Z" fill="#0D0C22"></path>
                <path d="M619.284 1186.18C618.129 1186.68 617.118 1187.46 616.342 1188.45L617.254 1187.87C617.873 1187.3 618.751 1186.63 619.284 1186.18Z" fill="#0D0C22"></path>
                <path d="M281.304 1196.06C280.427 1195.3 279.354 1194.8 278.207 1194.61C279.136 1195.06 280.065 1195.51 280.684 1195.85L281.304 1196.06Z" fill="#0D0C22"></path>
                <path d="M247.841 1164.01C247.704 1162.66 247.288 1161.35 246.619 1160.16C247.093 1161.39 247.489 1162.66 247.806 1163.94L247.841 1164.01Z" fill="#0D0C22"></path>
                <path d="M472.623 590.836C426.682 610.503 374.546 632.802 306.976 632.802C278.71 632.746 250.58 628.868 223.353 621.274L270.086 1101.08C271.74 1121.13 280.876 1139.83 295.679 1153.46C310.482 1167.09 329.87 1174.65 349.992 1174.65C349.992 1174.65 416.254 1178.09 438.365 1178.09C462.161 1178.09 533.516 1174.65 533.516 1174.65C553.636 1174.65 573.019 1167.08 587.819 1153.45C602.619 1139.82 611.752 1121.13 613.406 1101.08L663.459 570.876C641.091 563.237 618.516 558.161 593.068 558.161C549.054 558.144 513.591 573.303 472.623 590.836Z" fill="#FFDD00"></path>
                <path d="M78.6885 386.132L79.4799 386.872L79.9962 387.182C79.5987 386.787 79.1603 386.435 78.6885 386.132V386.132Z" fill="#0D0C22"></path>
                <path d="M879.567 341.849L872.53 306.352C866.215 274.503 851.882 244.409 819.19 232.898C808.711 229.215 796.821 227.633 788.786 220.01C780.751 212.388 778.376 200.55 776.518 189.572C773.076 169.423 769.842 149.257 766.314 129.143C763.269 111.85 760.86 92.4243 752.928 76.56C742.604 55.2584 721.182 42.8009 699.88 34.559C688.965 30.4844 677.826 27.0375 666.517 24.2352C613.297 10.1947 557.342 5.03277 502.591 2.09047C436.875 -1.53577 370.983 -0.443234 305.422 5.35968C256.625 9.79894 205.229 15.1674 158.858 32.0469C141.91 38.224 124.445 45.6399 111.558 58.7341C95.7448 74.8221 90.5829 99.7026 102.128 119.765C110.336 134.012 124.239 144.078 138.985 150.737C158.192 159.317 178.251 165.846 198.829 170.215C256.126 182.879 315.471 187.851 374.007 189.968C438.887 192.586 503.87 190.464 568.44 183.618C584.408 181.863 600.347 179.758 616.257 177.304C634.995 174.43 647.022 149.928 641.499 132.859C634.891 112.453 617.134 104.538 597.055 107.618C594.095 108.082 591.153 108.512 588.193 108.942L586.06 109.252C579.257 110.113 572.455 110.915 565.653 111.661C551.601 113.175 537.515 114.414 523.394 115.378C491.768 117.58 460.057 118.595 428.363 118.647C397.219 118.647 366.058 117.769 334.983 115.722C320.805 114.793 306.661 113.611 292.552 112.177C286.134 111.506 279.733 110.801 273.333 110.009L267.241 109.235L265.917 109.046L259.602 108.134C246.697 106.189 233.792 103.953 221.025 101.251C219.737 100.965 218.584 100.249 217.758 99.2193C216.932 98.1901 216.482 96.9099 216.482 95.5903C216.482 94.2706 216.932 92.9904 217.758 91.9612C218.584 90.9319 219.737 90.2152 221.025 89.9293H221.266C232.33 87.5721 243.479 85.5589 254.663 83.8038C258.392 83.2188 262.131 82.6453 265.882 82.0832H265.985C272.988 81.6186 280.026 80.3625 286.994 79.5366C347.624 73.2302 408.614 71.0801 469.538 73.1014C499.115 73.9618 528.676 75.6996 558.116 78.6935C564.448 79.3474 570.746 80.0357 577.043 80.8099C579.452 81.1025 581.878 81.4465 584.305 81.7391L589.191 82.4445C603.438 84.5667 617.61 87.1419 631.708 90.1703C652.597 94.7128 679.422 96.1925 688.713 119.077C691.673 126.338 693.015 134.408 694.649 142.03L696.731 151.752C696.786 151.926 696.826 152.105 696.852 152.285C701.773 175.227 706.7 198.169 711.632 221.111C711.994 222.806 712.002 224.557 711.657 226.255C711.312 227.954 710.621 229.562 709.626 230.982C708.632 232.401 707.355 233.6 705.877 234.504C704.398 235.408 702.75 235.997 701.033 236.236H700.895L697.884 236.649L694.908 237.044C685.478 238.272 676.038 239.419 666.586 240.486C647.968 242.608 629.322 244.443 610.648 245.992C573.539 249.077 536.356 251.102 499.098 252.066C480.114 252.57 461.135 252.806 442.162 252.771C366.643 252.712 291.189 248.322 216.173 239.625C208.051 238.662 199.93 237.629 191.808 236.58C198.106 237.389 187.231 235.96 185.029 235.651C179.867 234.928 174.705 234.177 169.543 233.397C152.216 230.798 134.993 227.598 117.7 224.793C96.7944 221.352 76.8005 223.073 57.8906 233.397C42.3685 241.891 29.8055 254.916 21.8776 270.735C13.7217 287.597 11.2956 305.956 7.64786 324.075C4.00009 342.193 -1.67805 361.688 0.472751 380.288C5.10128 420.431 33.165 453.054 73.5313 460.35C111.506 467.232 149.687 472.807 187.971 477.556C338.361 495.975 490.294 498.178 641.155 484.129C653.44 482.982 665.708 481.732 677.959 480.378C681.786 479.958 685.658 480.398 689.292 481.668C692.926 482.938 696.23 485.005 698.962 487.717C701.694 490.429 703.784 493.718 705.08 497.342C706.377 500.967 706.846 504.836 706.453 508.665L702.633 545.797C694.936 620.828 687.239 695.854 679.542 770.874C671.513 849.657 663.431 928.434 655.298 1007.2C653.004 1029.39 650.71 1051.57 648.416 1073.74C646.213 1095.58 645.904 1118.1 641.757 1139.68C635.218 1173.61 612.248 1194.45 578.73 1202.07C548.022 1209.06 516.652 1212.73 485.161 1213.01C450.249 1213.2 415.355 1211.65 380.443 1211.84C343.173 1212.05 297.525 1208.61 268.756 1180.87C243.479 1156.51 239.986 1118.36 236.545 1085.37C231.957 1041.7 227.409 998.039 222.9 954.381L197.607 711.615L181.244 554.538C180.968 551.94 180.693 549.376 180.435 546.76C178.473 528.023 165.207 509.681 144.301 510.627C126.407 511.418 106.069 526.629 108.168 546.76L120.298 663.214L145.385 904.104C152.532 972.528 159.661 1040.96 166.773 1109.41C168.15 1122.52 169.44 1135.67 170.885 1148.78C178.749 1220.43 233.465 1259.04 301.224 1269.91C340.799 1276.28 381.337 1277.59 421.497 1278.24C472.979 1279.07 524.977 1281.05 575.615 1271.72C650.653 1257.95 706.952 1207.85 714.987 1130.13C717.282 1107.69 719.576 1085.25 721.87 1062.8C729.498 988.559 737.115 914.313 744.72 840.061L769.601 597.451L781.009 486.263C781.577 480.749 783.905 475.565 787.649 471.478C791.392 467.391 796.352 464.617 801.794 463.567C823.25 459.386 843.761 452.245 859.023 435.916C883.318 409.918 888.153 376.021 879.567 341.849ZM72.4301 365.835C72.757 365.68 72.1548 368.484 71.8967 369.792C71.8451 367.813 71.9483 366.058 72.4301 365.835ZM74.5121 381.94C74.6842 381.819 75.2003 382.508 75.7337 383.334C74.925 382.576 74.4089 382.009 74.4949 381.94H74.5121ZM76.5597 384.641C77.2996 385.897 77.6953 386.689 76.5597 384.641V384.641ZM80.672 387.979H80.7752C80.7752 388.1 80.9645 388.22 81.0333 388.341C80.9192 388.208 80.7925 388.087 80.6548 387.979H80.672ZM800.796 382.989C793.088 390.319 781.473 393.726 769.996 395.43C641.292 414.529 510.713 424.199 380.597 419.932C287.476 416.749 195.336 406.407 103.144 393.382C94.1102 392.109 84.3197 390.457 78.1082 383.798C66.4078 371.237 72.1548 345.944 75.2003 330.768C77.9878 316.865 83.3218 298.334 99.8572 296.355C125.667 293.327 155.64 304.218 181.175 308.09C211.917 312.781 242.774 316.538 273.745 319.36C405.925 331.405 540.325 329.529 671.92 311.91C695.905 308.686 719.805 304.941 743.619 300.674C764.835 296.871 788.356 289.731 801.175 311.703C809.967 326.673 811.137 346.701 809.778 363.615C809.359 370.984 806.139 377.915 800.779 382.989H800.796Z" fill="#0D0C22"></path>
            </svg>
            <span class="font-cookie text-2xl">Buy me a coffee</span>
        </a>
    </div>
</aside>




<aside class="border-t-2 mt-2 p-4 rounded-lg shadow-sm">
    <h2 class="mt-2 text-center">More like this</h2>

    <ul>
            <li>
                <a href="dynamic-programming-longest-common-subsequence">Solve Longest Common Subsequence with Dynamic Programming</a>
            </li>
            <li>
                <a href="dynamic-programming-editlevenshtein-distance">Solve Edit(Levenshtein) distance with Dynamic Programming</a>
            </li>
            <li>
                <a href="noncopyable-objects">How to prevent the compiler from copying an object in cpp</a>
            </li>
            <li>
                <a href="memory-leak-woes">A guide to finding memory leaks using macros in C&#x2B;&#x2B;</a>
            </li>
    </ul>
</aside>


<aside class="border-t-2 mt-2 p-4 rounded-lg shadow-sm">
    <form action="https://ankursheel.us12.list-manage.com/subscribe/post?u=d88459c290a1a8d98ad780bbc&amp;amp;id=31e4ebb75b" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
        <div id="mc_embed_signup_scroll">
            <p class="mt-2 text-2xl font-bold text-center">Want a weekly digest of this blog?</p>
            <div class="flex gap-4 items-center justify-center flex-wrap">
                <input class="rounded-md border-gray-300 focus:border-gray-500 focus:ring-0 required" aria-label="First Name" name="FNAME" required="" placeholder="First Name" type="text" id="mce-FNAME">
                <input class="rounded-md border-gray-300 focus:border-gray-500 focus:ring-0 required email" name="EMAIL" aria-label="Email Address" placeholder="Email Address" required="" type="email" id="mce-EMAIL">
                <button class="px-3 py-2 text-white bg-green-400 rounded-md focus:bg-indigo-600 focus:outline-none flex-none" type="submit">Subscribe</button>
                <input type="checkbox" class="hidden" value="1" name="group[52461][1]" id="mce-group[52461]-52461-0" checked="">
                <div style="position: absolute; left: -5000px;" aria-hidden="true">
                    <input type="text" name="b_d88459c290a1a8d98ad780bbc_31e4ebb75b" tabindex="-1" value="">
                </div>
                <div>
                    <a href="http://eepurl.com/hRcTAL" title="Mailchimp - email marketing made easy and fun">
                        <img src="https://eep.io/mc-cdn-images/template_images/branding_logo_text_dark_dtp.svg">
                    </a>
                </div>
            </div>
        </div>
    </form>
</aside>


<footer>
    <script src="https://giscus.app/client.js" data-repo="AnkurSheel/blog-comments" data-repo-id="R_kgDOIAUZqA" data-category="Announcements" data-category-id="DIC_kwDOIAUZqM4CRdIF" data-mapping="pathname" data-strict="1" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="preferred_color_scheme" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
    </script>

</footer>

        </article>
    </div>
</main>

<footer class="shadow-lg z-10 w-full bg-gray-500 text-white">
    
<div class="flex justify-between items-center max-w-6xl mx-auto px-4 py-3 mt-14">
    <div class="flex">
        <a class="" href="https://twitter.com/ankur_sheel" title="Connect on Twitter" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-6">
                <path fill="currentColor" fill-rule="evenodd" d="M7.233 4.696c0-1.727 1.4-3.127 3.127-3.127 1.014 0 1.823.479 2.365 1.175a5.246 5.246 0 0 0 1.626-.629 2.634 2.634 0 0 1-1.148 1.45l.002.003a5.26 5.26 0 0 0 1.5-.413l-.001.002c-.337.505-.76.95-1.248 1.313.026.177.04.354.04.53 0 3.687-2.809 7.975-7.975 7.975a7.93 7.93 0 0 1-4.296-1.26.5.5 0 0 1-.108-.748.45.45 0 0 1 .438-.215c.916.108 1.83-.004 2.637-.356a3.086 3.086 0 0 1-1.69-1.876.45.45 0 0 1 .103-.448 3.07 3.07 0 0 1-1.045-2.31v-.034a.45.45 0 0 1 .365-.442 3.068 3.068 0 0 1-.344-1.416c0-.468.003-1.058.332-1.59a.45.45 0 0 1 .323-.208.5.5 0 0 1 .538.161 6.964 6.964 0 0 0 4.46 2.507v-.044Zm-1.712 7.279a6.936 6.936 0 0 1-2.249-.373 5.318 5.318 0 0 0 2.39-1.042.45.45 0 0 0-.27-.804 2.174 2.174 0 0 1-1.714-.888c.19-.015.376-.048.556-.096a.45.45 0 0 0-.028-.876 2.18 2.18 0 0 1-1.644-1.474c.2.048.409.077.623.084a.45.45 0 0 0 .265-.824 2.177 2.177 0 0 1-.97-1.812c0-.168.003-.317.013-.453a7.95 7.95 0 0 0 5.282 2.376.5.5 0 0 0 .513-.61 2.127 2.127 0 0 1 2.071-2.614c1.234 0 2.136 1.143 2.136 2.432 0 3.256-2.476 6.974-6.975 6.974Z" clip-rule="evenodd"></path>
            </svg>
        </a>
        <a class="ml-4" href="https://www.linkedin.com/in/ankursheel" title="View my LinkedIn profile" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6">
                <path fill="currentColor" d="M4.98 3.5C4.98 4.881 3.87 6 2.5 6S.02 4.881.02 3.5C.02 2.12 1.13 1 2.5 1s2.48 1.12 2.48 2.5zM5 8H0v16h5V8zm7.982 0H8.014v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0V24H24V13.869c0-7.88-8.922-7.593-11.018-3.714V8z"></path>
            </svg>

        </a>

        <a class="ml-4" href="https://github.com/AnkurSheel" title="Check out my work on Github" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-6">
                <path fill="currentColor" fill-rule="evenodd" d="M7.5.85a6.65 6.65 0 0 0-2.102 12.96c.332.061.454-.144.454-.32 0-.159-.006-.576-.01-1.131-1.849.401-2.24-.892-2.24-.892-.302-.768-.738-.973-.738-.973-.604-.412.046-.404.046-.404.667.047 1.018.685 1.018.685.594 1.017 1.557.723 1.936.553.06-.43.232-.723.422-.889-1.477-.168-3.029-.738-3.029-3.287 0-.726.26-1.319.685-1.784-.069-.168-.297-.844.065-1.76 0 0 .558-.179 1.828.681A6.41 6.41 0 0 1 7.5 4.066a6.394 6.394 0 0 1 1.665.223c1.27-.86 1.827-.68 1.827-.68.363.915.135 1.59.066 1.759.427.465.684 1.058.684 1.784 0 2.555-1.555 3.117-3.036 3.282.238.205.45.611.45 1.232 0 .888-.007 1.605-.007 1.823 0 .178.12.385.457.32A6.652 6.652 0 0 0 7.499.85Z" clip-rule="evenodd"></path>
            </svg>
        </a>

        <a class="ml-4" href="https://www.buymeacoffee.com/ankursheel" title="Buy Me A Coffee" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="feather feather-coffee h-6" viewBox="0 0 24 24">
                <path d="M18 8h1a4 4 0 0 1 0 8h-1M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8zm4-7v3m4-3v3m4-3v3"></path>
            </svg>
        </a>

        <a class="ml-4" target="_blank" rel="noopener noreferrer" href="/rss.xml" title="RSS">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="h-6">
                <path d="M6.503 20.752A3.25 3.25 0 0 1 3.252 24 3.25 3.25 0 0 1 0 20.752a3.25 3.25 0 0 1 3.252-3.248 3.25 3.25 0 0 1 3.251 3.248zM0 8.18v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817C15.777 15.29 8.721 8.242 0 8.18zm0-3.368C10.58 4.858 19.152 13.406 19.183 24H24C23.97 10.769 13.245.046 0 0v4.812z" fill="currentColor"></path>
            </svg>
        </a>
    </div>
    <div class="copy">
        © AnkurSheel 2023
    </div>
</div>

</footer>


<script src="/assets/js/blog.js" defer=""></script>
<script src="https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js" defer=""></script>
    <script data-goatcounter="https://ankursheel.goatcounter.com/count" src="/assets/js/gc-count.js"></script>







</body></html>