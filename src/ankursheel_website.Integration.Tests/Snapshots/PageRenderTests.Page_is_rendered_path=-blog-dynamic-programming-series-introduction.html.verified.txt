
<!DOCTYPE html>
<html lang="en" class="min-h-screen">
<head>
    

<title>Ankur Sheel - A guide to getting started with Dynamic Programming</title>
<meta charset="utf-8"/>

<!-- Google Tag Manager -->
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MG9PGWH');</script>
    <!-- End Google Tag Manager -->

<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
<link href="/assets/styles.css" rel="stylesheet"/>
<link href="/assets/code-styles/obsidian.min.css" rel="stylesheet"/>
<link rel="canonical" href="https://www.ankursheel.com/blog/dynamic-programming-series-introduction"/>

<meta itemProp="name" content="A guide to getting started with Dynamic Programming"/>
<meta itemProp="description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
    <meta itemProp="image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png"/>
<meta property="og:url" content="https://www.ankursheel.com/blog/dynamic-programming-series-introduction"/>
<meta property="og:type" content="article"/>
<meta property="og:title" content="A guide to getting started with Dynamic Programming"/>
<meta property="og:description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
    <meta property="og:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png"/>
    <meta property="og:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png"/>
<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:site" content="ankur_sheel"/>
<meta name="twitter:creator" content="ankur_sheel"/>
<meta name="twitter:title" content="A guide to getting started with Dynamic Programming"/>
<meta name="twitter:description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
    <meta name="twitter:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-twitter.png"/>
    <meta name="twitter:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-twitter.png"/>

</head>
<body class="font-sans font-normal leading-relaxed font-base text-gray-800 min-h-screen bg-gray-100">
    <!-- Google Tag Manager (noscript) -->
    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MG9PGWH"
                height="0" width="0" style="display:none;visibility:hidden">
        </iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
<header class="sticky top-0 bg-white shadow-lg z-10 w-full">
    

<!-- https://www.section.io/engineering-education/creating-a-responsive-navigation-bar-using-tailwind-css-and-javascript/ -->

<nav class="text-gray-500 font-semibold">
    <div class="max-w-6xl mx-auto px-4">
        <div class="flex justify-between">
            <div class="flex space-x-7 items-center  ">
                <!-- Website Logo -->
                <div>
                    <a href="/" class="flex items-center py-4 px-2 ">
                            Ankur Sheel
                    </a>
                </div>
                <ul class="hidden lg:flex items-center space-x-1">
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/about">About</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/blog">All Posts</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/tags">All Tags</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/contact">Contact</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/cv">CV</a>
                        </li>
                        <li class="py-4 px-2 transition-all transform hover:scale-110">
                            <a href="/impossible-list">Impossible List</a>
                        </li>
                </ul>
            </div>

            <ul class="hidden lg:flex items-center space-x-3">
                <li>
                    <a role="button" class="" target="_blank" rel="noopener noreferrer" href="/rss.xml" title="RSS">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="h-6">
                          <path d="M6.503 20.752A3.25 3.25 0 0 1 3.252 24 3.25 3.25 0 0 1 0 20.752a3.25 3.25 0 0 1 3.252-3.248 3.25 3.25 0 0 1 3.251 3.248zM0 8.18v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817C15.777 15.29 8.721 8.242 0 8.18zm0-3.368C10.58 4.858 19.152 13.406 19.183 24H24C23.97 10.769 13.245.046 0 0v4.812z" fill="currentColor"/>
                        </svg>

                    </a>
                </li>
                <li>
                    <a role="button" class="inline-flex items-center bg-green-400 text-white p-2 rounded-md text-2xl drop-shadow-lg hover:bg-green-800" target="_blank" rel="noopener noreferrer" href="https://www.buymeacoffee.com/ankursheel" title="Did you learn something or find this summary interesting?">
                        <img class="h-8 mr-2 border-none" src="/assets/images/bmc-logo.svg" alt="Buy Me A Coffee">
                        <p class="font-cookie">Buy me a coffee</p>
                    </a>
                </li>
            </ul>

            <div class="lg:hidden flex items-center">
                <button class="outline-none mobile-menu-button" aria-label="Mobile Menu">
                    <svg class="h-6 w-6 fill-current" viewBox="0 0 24 24">
                        <path fill-rule="evenodd"
                              d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"/>
                    </svg>
                </button>
            </div>

        </div>
        <div class="hidden mobile-menu">
            <ul class="flex flex-col">
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/about" class="block">About</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/blog" class="block">All Posts</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/tags" class="block">All Tags</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/contact" class="block">Contact</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/cv" class="block">CV</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/impossible-list" class="block">Impossible List</a>
                    </li>
            </ul>
        </div>
    </div>
</nav>

</header>

<main class="mx-auto max-w-prose p-4 prose prose-xl prose-purple">
    <h1 class="text-center">A guide to getting started with Dynamic Programming</h1>
    <div class="flex flex-col min-h-screen">
        <article class="prose-code:bg-slate-400">
            
<div class="prose-sm italic ">
    <div class="flex justify-evenly items-center">
        <time datetime="2017-03-27">March 27, 2017</time>
        <i class="font-bold">
            Reading Time: 7 min
        </i>
    </div>

    <div class="flex flex-row flex-wrap gap-1 place-content-center">
            <a href="/tags/cpp" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">cpp</a>
            <a href="/tags/dynamic-programming" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">dynamic programming</a>
            <a href="/tags/tutorial" class="block flex-initial border-2 border-black m-2 rounded-xl p-2 bg-gray-200 shadow-md">tutorial</a>
    </div>
</div>

<html><head></head><body><p>Dynamic Programming is one of those techniques that every programmer should have in their toolbox. But, it is also confusing for a lot of people.</p>
<p>For a long time, I struggled to grasp how to apply Dynamic Programming to problems. Most articles that I could find on the internet gave the final dynamic programming solution without actually showing the approach taken to arrive at the final solution.</p>
<p>This article will show the benefits of using a Dynamic Programming approach to solving problems with an example. In the end, I will show some steps you can use to find a Dynamic Programming solution.</p>
<p>Hopefully, after reading this article, you will find Dynamic Programming intuitive and straightforward.</p>
<h2 id="what-is-dynamic-programming">What is Dynamic Programming?</h2>
<p>Dynamic programming is an efficient method for solving specific types of complicated computational problems. These problems are generally those that can be broken down into smaller overlapping sub-problems. It can be characterised basically as recursion along with memoization.</p>
<p>Memoization is the ability to save the results of specific states to reuse later.</p>
<h2 id="profiling">Profiling</h2>
<p>To prove that we are improving our solution, we need statistics that we can compare. I will be using <a href="https://github.com/google/benchmark">google benchmark</a> to help profile our solutions. The benchmark will look like this.</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------
Benchmark Name   Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------
</code></pre>
<ol>
<li><strong>Benchmark Name:</strong> The name of the benchmark. It will be in the format the FunctionName/value is passed in.</li>
<li><strong>Running Time</strong>: The time it took for our function to return a result.</li>
<li><strong>Iterations/sec</strong>: The number of times the function could be invoked in 1 second.</li>
<li><strong>Items/sec:</strong> The number of items that were processed in 1 second.</li>
</ol>
<p>While 2 and 3 will indicate the time complexity of the function, 4 will provide us with the space complexity.</p>
<h2 id="example-fibonacci-series">Example: Fibonacci Series</h2>
<p>The classic example to explain dynamic programming is the <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci computation</a> which can be formalised as follows</p>
<pre><code class="language-ini hljs">Fibonacci(n) = 0; if n = 0
Fibonacci(n) = 1; if n = 1
Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) ; if n &gt;=2
</code></pre>
<h3 id="naive-recursive-approach">Naive Recursive Approach</h3>
<p>The Fibonacci sequence can easily be solved by the following recursive method:</p>
<pre><code class="language-cpp hljs"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">return</span> Fibonacci(n - <span class="hljs-number">2</span>) + Fibonacci(n - <span class="hljs-number">1</span>);
}
</code></pre>
<p>On running the above code and profiling it on my machine, I get:</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciRecursive/10                 0 ms         2488889          17.0685M
FibonacciRecursive/20                 0 ms           21333          303.026k
FibonacciRecursive/30                 8 ms             179          3.60887k
FibonacciRecursive/40               997 ms               1                40
FibonacciRecursive/50            124510 ms               1           0.40282
</code></pre>
<p>Although this method returns almost instantly for <strong>n &lt;= 30</strong>, it takes a little less than a second for <strong>n = 40</strong> and approximately 2 minutes for <strong>n = 50</strong>. Why is the amount of running time increasing so rapidly? This can be explained easily by following the execution stack. Let's do this for <strong>n = 6</strong> to keep it simple. The following image shows the sequence of calls that are made.</p>
<p><img src="/assets/images/posts/dynamic-programming-series-introduction/cover.png" alt="Fibonacci Series"></p>
<p>Looking at the image, we can see that to calculate <em>fibonacci(6)</em>, we calculate</p>
<ul>
<li><em>fibonacci(5)</em> 1 time</li>
<li><em>fibonacci(4)</em> 2 times,</li>
<li><em>fibonacci(3)</em> 3 times,</li>
<li><em>fibonacci(2)</em> 5 times,</li>
<li><em>fibonacci(1)</em> 8 times; and</li>
<li><em>fibonacci(0)</em> 5 times.</li>
</ul>
<p>Throughout the call-stack, we are repeatedly computing values that we have already computed. This amount of duplicated work being done keeps on increasing as <em><strong>n</strong></em> becomes larger.</p>
<p>You must have realised that this solution is not at all scalable. If you are thinking that there has to be a better way, you are correct.</p>
<h3 id="top-down-recursive-approach-with-memoization">Top-Down Recursive approach with Memoization</h3>
<p>The 1st step to improving the above solution is to add memoization, i.e. to store the previously computed values in a data structure. Although you can use any data structure that you like, I will use a map for the purposes of this example.</p>
<pre><code class="language-cpp hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciMemonized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-keyword">long</span>&gt; computedValues;
    computedValues.insert(make_pair(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));
    computedValues.insert(make_pair(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));
    <span class="hljs-keyword">return</span> FibonacciMemonized(n, computedValues);
}

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciMemonized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-keyword">long</span>&gt;&amp; computedValues)</span>
</span>{
    <span class="hljs-keyword">if</span> (computedValues.find(n) != computedValues.end())
    {
        <span class="hljs-keyword">return</span> computedValues[n];
    }
    <span class="hljs-keyword">long</span> newValue = (FibonacciMemonized(n - <span class="hljs-number">1</span>, computedValues) + FibonacciMemonized(n - <span class="hljs-number">2</span>, computedValues)) % MOD;
    computedValues.insert(make_pair(n, newValue));
    <span class="hljs-keyword">return</span> newValue;
}
</code></pre>
<p>The top method is our main method. It adds the 2 base cases to a map and then calls the bottom method with the map as one of the arguments.</p>
<p>This bottom method is our recursive method. In this method, we check if the map contains the computed value. If it does, we just return that value. Otherwise, we calculate the value for <em><strong>n-1</strong></em> and <strong><em>n-2</em></strong>.</p>
<p>We mod the result using <strong>1000000007</strong> to avoid overflows. Before returning their sum, we store the value in our map.</p>
<p>How better is this version? Let's look at the benchmark results.</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciMemonized/1000               0 ms            4073          3.60284M
FibonacciMemonized/5000               2 ms             896          2.90891M
FibonacciMemonized/10000              3 ms             407          2.82288M
FibonacciMemonized/15000              5 ms             242          2.66937M
FibonacciMemonized/20000              7 ms             187          2.65432M
</code></pre>
<p>We can see that we have reduced the amount of time drastically. Even for <strong>n = 20000</strong>, the result is instantaneous.</p>
<p>However, there is a problem with this approach. Can you spot it?</p>
<p>If you said memory usage, you are absolutely correct. Although the new version is much faster, it is still a recursive algorithm.</p>
<p>And, the problem with recursive algorithms is that each recursive call takes some space on the stack. A high enough <strong>n</strong>, and we run the risk of running out of memory.</p>
<p>Let's see why this happens with an example where <strong>n = 100</strong>. Because we don't have the result when we start, we call the method recursively for 999, 998, 997 ... 1. At that point, we have all the computed results in our map.</p>
<p>As we return from our recursive functions, we just look up the value in the table and return it. So, even though we have reduced the number of recursive calls, we still make <strong>n</strong> recursive calls before getting our initial result. This can easily be seen by comparing the iteration/seconds between this and the previous algorithm.</p>
<p>Let's try something better.</p>
<h3 id="bottom-up-approach-with-dynamic-programming">Bottom-Up Approach with Dynamic Programming</h3>
<p>In the previous approach, our main problem was the recursive nature of our algorithm. Let's see if we can get rid of it by using an iterative approach.</p>
<p>How do we do this? Instead of starting from the final value, we will begin with the smallest value of <strong>n</strong> and build up the results.</p>
<pre><code class="language-cpp hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciDP</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">long</span>* results = <span class="hljs-keyword">new</span> <span class="hljs-keyword">long</span>[n + <span class="hljs-number">1</span>];
    results[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;
    results[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)
    {
        results[i] = (results[i - <span class="hljs-number">1</span>] + results[i - <span class="hljs-number">2</span>]) % MOD;
    }
    <span class="hljs-keyword">long</span> value = results[n];
    <span class="hljs-keyword">delete</span>[] results;
    <span class="hljs-keyword">return</span> value;
}
</code></pre>
<p>In the above function, we have an array of <strong>n+1</strong> to store the results. We initialise the array for our base cases of <strong>n=0</strong> and <strong>n=1</strong> and then iterate from <strong>2</strong> to <strong>n</strong>. At each step, we can use the 2 previously computed values and finally return the result.</p>
<p>Let's again look at the benchmark results to see how does this approach do?</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciDP/100000                    1 ms            1906          130.711M
FibonacciDP/600000                    5 ms             280          111.456M
FibonacciDP/1100000                  10 ms             145          110.626M
FibonacciDP/1600000                  14 ms             100          112.249M
FibonacciDP/2100000                  18 ms              81          110.448M
</code></pre>
<p>Even when <strong>n=210,000</strong>, this approach returns almost instantly. At the same time, since this algorithm is not recursive in nature, we have drastically reduced the required amount of space. We can see this by comparing the items/sec, which decreases much slower even though <strong>n</strong> is increasing more rapidly than before.</p>
<p>You may be thinking that since we have a linear time and space complexity, this is the end.</p>
<p>In most cases, that would be true. But, in this case, we can optimise our solution further.</p>
<h3 id="bottom-up-approach-with-dynamic-programming-optimised">Bottom-Up Approach with Dynamic Programming (Optimised)</h3>
<p>In the last algorithm, the amount of space required is proportional to <strong>n</strong>. This is because we are storing all the results. But, we don't need to keep all of them.</p>
<p>Let's eliminate the array by using just 3 variables - 2 to store the previous results and 1 to store the current result.</p>
<pre><code class="language-cpp hljs">    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciDPOptimized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">long</span> n1 = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">long</span> n2 = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">long</span> current = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)
    {
        current = (n1 + n2) % MOD;
        n1 = n2;
        n2 = current;
    }
    <span class="hljs-keyword">return</span> current;
}
</code></pre>
<p>Although this algorithm is doing precisely the same thing as the previous one, we have reduced our space complexity to be constant since the amount of space needed is no longer dependent on <strong>n</strong>.</p>
<p>Again the benchmark results for comparison.</p>
<pre><code class="language-ini hljs">----------------------------------------------------------------------------------
Benchmark Name                    Running Time   Iterations/sec        Items/sec
----------------------------------------------------------------------------------
FibonacciDPOptimized/100000                0 ms            2987          202.569M
FibonacciDPOptimized/600000                3 ms             498          207.242M
FibonacciDPOptimized/1100000               5 ms             280          202.138M
FibonacciDPOptimized/1600000               7 ms             187          205.188M
FibonacciDPOptimized/2100000               10 ms            128          205.0708M
</code></pre>
<p>Here, we can see that although <strong>n</strong> is increasing, the items/sec is more or less the same.</p>
<p>This is the best we can do, and no further optimisations are possible.</p>
<h2 id="conclusion">Conclusion</h2>
<p>From the above example, we can see that we only need to identify overlapping subproblems and then avoid duplicated work by caching the computed results.</p>
<p>To recap, we can use these steps to find a dynamic programming approach to our problem.</p>
<ol>
<li>Find the overlapping subproblem.</li>
<li>Start with a recursive solution</li>
<li>Modify the recursive solution to use a top-down memoized version.</li>
<li>Remove the recursion by making it an iterative solution.</li>
<li>If you don't need to keep all the previous results, keep only the required ones.</li>
</ol>
<p>If you would like to run the code yourself, you can find the code <a href="https://github.com/AnkurSheel/DynamicProgramming">here</a>.</p>
<p>Hopefully, this article has removed the mystery around Dynamic Programming.</p>
<p>In the following few articles in the series, we will look at some of the more common problems that can be solved by Dynamic Programming and use the above steps to come up with a solution.</p>
<p>Have you tried Dynamic Programming before? How was your experience? Let me know.</p>
</body></html>



<aside class="hidden md:block mt-12">
        <div class="flex justify-center gap-x-5 ">
            <a class="bg-social-twitter social-button" href="https://twitter.com/intent/tweet?url=https://www.ankursheel.com/blog/dynamic-programming-series-introduction&text=In%20this%20article%2C%20I%20will%20show%20the%20advantages%20of%20using%20a%20Dynamic%20Programming%20approach.%20Using%20an%20example%2C%20we%20will%20come%20up%20with%20an%20approach%20to%20find%20a%20DP%20solution. via @ankur_sheel" target="_blank" rel="noopener noreferrer">Tweet this Article</a>
            <a class="bg-social-linkedin social-button" href="https://www.linkedin.com/sharing/share-offsite/?url=https://www.ankursheel.com/blog/dynamic-programming-series-introduction"target="_blank" rel="noopener noreferrer">Share on Linkedin</a>
        </div>
</aside>



        </article>
    </div>
</main>

<footer class="shadow-lg z-10 w-full bg-gray-500 text-white">
    
<div class="flex justify-between items-center max-w-6xl mx-auto px-4 py-3 mt-14">
    <div class="flex">
        <a class="" href="https://twitter.com/ankur_sheel" title="Connect on Twitter" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-6">
              <path fill="currentColor" fill-rule="evenodd" d="M7.233 4.696c0-1.727 1.4-3.127 3.127-3.127 1.014 0 1.823.479 2.365 1.175a5.246 5.246 0 0 0 1.626-.629 2.634 2.634 0 0 1-1.148 1.45l.002.003a5.26 5.26 0 0 0 1.5-.413l-.001.002c-.337.505-.76.95-1.248 1.313.026.177.04.354.04.53 0 3.687-2.809 7.975-7.975 7.975a7.93 7.93 0 0 1-4.296-1.26.5.5 0 0 1-.108-.748.45.45 0 0 1 .438-.215c.916.108 1.83-.004 2.637-.356a3.086 3.086 0 0 1-1.69-1.876.45.45 0 0 1 .103-.448 3.07 3.07 0 0 1-1.045-2.31v-.034a.45.45 0 0 1 .365-.442 3.068 3.068 0 0 1-.344-1.416c0-.468.003-1.058.332-1.59a.45.45 0 0 1 .323-.208.5.5 0 0 1 .538.161 6.964 6.964 0 0 0 4.46 2.507v-.044Zm-1.712 7.279a6.936 6.936 0 0 1-2.249-.373 5.318 5.318 0 0 0 2.39-1.042.45.45 0 0 0-.27-.804 2.174 2.174 0 0 1-1.714-.888c.19-.015.376-.048.556-.096a.45.45 0 0 0-.028-.876 2.18 2.18 0 0 1-1.644-1.474c.2.048.409.077.623.084a.45.45 0 0 0 .265-.824 2.177 2.177 0 0 1-.97-1.812c0-.168.003-.317.013-.453a7.95 7.95 0 0 0 5.282 2.376.5.5 0 0 0 .513-.61 2.127 2.127 0 0 1 2.071-2.614c1.234 0 2.136 1.143 2.136 2.432 0 3.256-2.476 6.974-6.975 6.974Z" clip-rule="evenodd"/>
            </svg>
        </a>
        <a class="ml-4" href="https://www.linkedin.com/in/ankursheel" title="View my LinkedIn profile" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6">
              <path fill="currentColor" d="M4.98 3.5C4.98 4.881 3.87 6 2.5 6S.02 4.881.02 3.5C.02 2.12 1.13 1 2.5 1s2.48 1.12 2.48 2.5zM5 8H0v16h5V8zm7.982 0H8.014v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0V24H24V13.869c0-7.88-8.922-7.593-11.018-3.714V8z"/>
            </svg>

        </a>

        <a class="ml-4" href="https://github.com/AnkurSheel" title="Check out my work on Github" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 15 15" class="h-6">
              <path fill="currentColor" fill-rule="evenodd" d="M7.5.85a6.65 6.65 0 0 0-2.102 12.96c.332.061.454-.144.454-.32 0-.159-.006-.576-.01-1.131-1.849.401-2.24-.892-2.24-.892-.302-.768-.738-.973-.738-.973-.604-.412.046-.404.046-.404.667.047 1.018.685 1.018.685.594 1.017 1.557.723 1.936.553.06-.43.232-.723.422-.889-1.477-.168-3.029-.738-3.029-3.287 0-.726.26-1.319.685-1.784-.069-.168-.297-.844.065-1.76 0 0 .558-.179 1.828.681A6.41 6.41 0 0 1 7.5 4.066a6.394 6.394 0 0 1 1.665.223c1.27-.86 1.827-.68 1.827-.68.363.915.135 1.59.066 1.759.427.465.684 1.058.684 1.784 0 2.555-1.555 3.117-3.036 3.282.238.205.45.611.45 1.232 0 .888-.007 1.605-.007 1.823 0 .178.12.385.457.32A6.652 6.652 0 0 0 7.499.85Z" clip-rule="evenodd"/>
            </svg>
        </a>

        <a class="ml-4" href="https://www.buymeacoffee.com/ankursheel" title="Buy Me A Coffee" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="feather feather-coffee h-6" viewBox="0 0 24 24">
              <path d="M18 8h1a4 4 0 0 1 0 8h-1M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8zm4-7v3m4-3v3m4-3v3"/>
            </svg>
        </a>
    </div>
    <div class="copy">
        © AnkurSheel 2021
    </div>
</div>

</footer>


<script src="/assets/js/blog.js"></script>
    <script data-goatcounter="https://ankursheel.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>



    <script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="ankursheel" data-description="Support me on Buy me a coffee!" data-message="Did you learn something or find this summary interesting? Buy me a coffee" data-color="#40DCA5" data-position="Right" data-x_margin="18" data-y_margin="18"></script>


</body>
</html>
