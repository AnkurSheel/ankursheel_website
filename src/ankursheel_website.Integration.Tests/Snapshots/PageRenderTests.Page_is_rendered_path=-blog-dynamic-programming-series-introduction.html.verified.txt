
<!DOCTYPE html>
<html lang="en" class="min-h-screen">
<head>
    

<title>Ankur Sheel - A guide to getting started with Dynamic Programming</title>
<meta charset="utf-8"/>

<!-- Google Tag Manager -->
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MG9PGWH');</script>
    <!-- End Google Tag Manager -->

<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
<link href="/assets/styles.css" rel="stylesheet"/>
<link href="/assets/code-styles/obsidian.min.css" rel="stylesheet"/>
<link rel="canonical" href="https://www.ankursheel.com/blog/dynamic-programming-series-introduction"/>

<meta itemProp="name" content="A guide to getting started with Dynamic Programming"/>
<meta itemProp="description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
    <meta itemProp="image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png"/>
<meta property="og:url" content="https://www.ankursheel.com/blog/dynamic-programming-series-introduction"/>
<meta property="og:type" content="article"/>
<meta property="og:title" content="A guide to getting started with Dynamic Programming"/>
<meta property="og:description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
    <meta property="og:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png"/>
    <meta property="og:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-facebook.png"/>
<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:site" content="ankur_sheel"/>
<meta name="twitter:creator" content="ankur_sheel"/>
<meta name="twitter:title" content="A guide to getting started with Dynamic Programming"/>
<meta name="twitter:description" content="In this article, I will show the advantages of using a Dynamic Programming approach. Using an example, we will come up with an approach to find a DP solution."/>
    <meta name="twitter:image" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-twitter.png"/>
    <meta name="twitter:image:secure_url" content="https://www.ankursheel.com/assets/images/social/dynamic-programming-series-introduction-twitter.png"/>

</head>
<body class="font-sans font-normal leading-relaxed font-base text-gray-800 min-h-screen bg-gray-100">
    <!-- Google Tag Manager (noscript) -->
    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MG9PGWH"
                height="0" width="0" style="display:none;visibility:hidden">
        </iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
<header class="sticky top-0 bg-white shadow-lg z-10 w-full">
    

<!-- https://www.section.io/engineering-education/creating-a-responsive-navigation-bar-using-tailwind-css-and-javascript/ -->

<nav>
    <div class="max-w-6xl mx-auto px-4">
        <div class="flex justify-between">
            <div class="flex space-x-7 items-center">
                <!-- Website Logo -->
                <div>
                    <a href="/" class="flex items-center py-4 px-2 ">
                        <span class="font-semibold text-gray-500 text-lg hover:text-green-500">
                            Ankur Sheel
                        </span
                        >
                    </a>
                </div>
                <ul class="hidden lg:flex items-center space-x-1">
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/about">About</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/blog">All Posts</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/tags">All Tags</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/contact">Contact</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/cv">CV</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/impossible-list">Impossible List</a>
                        </li>
                </ul>
            </div>

            <ul class="hidden lg:flex items-center space-x-3">
                <li>
                    <a role="button" class="" target="_blank" rel="noopener noreferrer" href="/rss.xml" title="RSS">
                        <img class="h-8 mr-2 border-none" src="/assets/images/rss.svg" alt="RSS">
                    </a>
                </li>
                <li>
                    <a role="button" class="inline-flex items-center bg-green-400 text-white p-2 rounded-md text-2xl drop-shadow-lg hover:bg-green-800" target="_blank" rel="noopener noreferrer" href="https://www.buymeacoffee.com/ankursheel" title="Did you learn something or find this summary interesting?">
                        <img class="h-8 mr-2 border-none" src="/assets/images/bmc-logo.svg" alt="Buy Me A Coffee">
                        <p class="font-cookie">Buy me a coffee</p>
                    </a>
                </li>
            </ul>

            <div class="lg:hidden flex items-center">
                <button class="outline-none mobile-menu-button" aria-label="Mobile Menu">
                    <svg class="h-6 w-6 fill-current" viewBox="0 0 24 24">
                        <path fill-rule="evenodd"
                              d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"/>
                    </svg>
                </button>
            </div>

        </div>
        <div class="hidden mobile-menu">
            <ul class="flex flex-col">
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/about" class="block">About</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/blog" class="block">All Posts</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/tags" class="block">All Tags</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/contact" class="block">Contact</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/cv" class="block">CV</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/impossible-list" class="block">Impossible List</a>
                    </li>
            </ul>
        </div>
    </div>
</nav>

</header>

<main class="mx-auto max-w-prose p-4 prose prose-xl prose-purple">
    <h1 class="text-center">A guide to getting started with Dynamic Programming</h1>
    <div class="flex flex-col min-h-screen">
        <article>
            
<div class="prose-sm italic ">
    <div class="flex justify-evenly items-center">
        <i>Last Updated On: 27-Mar-2017</i>
        <i class="font-bold">
            Reading Time: 7 min
        </i>
    </div>

    <div class="flex flex-row flex-wrap gap-1 place-content-center">
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/cpp" class="badge text-black bg-grey-light no-underline">cpp</a>
            </div>
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/dynamic-programming" class="badge text-black bg-grey-light no-underline">dynamic programming</a>
            </div>
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/tutorial" class="badge text-black bg-grey-light no-underline">tutorial</a>
            </div>
    </div>
</div>

<html><head></head><body><p>Dynamic Programming is one of those techniques that every programmer should have in their toolbox. But, it is also confusing for a lot of people.</p>
<p>For a long time, I struggled to grasp how to apply Dynamic Programming to problems. Most articles that I could find on the internet gave the final dynamic programming solution without actually showing the approach taken to arrive at the final solution.</p>
<p>This article will show the benefits of using a Dynamic Programming approach to solving problems with an example. In the end, I will show some steps you can use to find a Dynamic Programming solution.</p>
<p>Hopefully, after reading this article, you will find Dynamic Programming intuitive and straightforward.</p>
<h2 id="what-is-dynamic-programming">What is Dynamic Programming?</h2>
<p>Dynamic programming is an efficient method for solving specific types of complicated computational problems. These problems are generally those that can be broken down into smaller overlapping sub-problems. It can be characterised basically as recursion along with memoization.</p>
<p>Memoization is the ability to save the results of specific states to reuse later.</p>
<h2 id="profiling">Profiling</h2>
<p>To prove that we are improving our solution, we need statistics that we can compare. I will be using <a href="https://github.com/google/benchmark">google benchmark</a> to help profile our solutions. The benchmark will look like this.</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------
Benchmark Name   Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------
</code></pre>
<ol>
<li><strong>Benchmark Name:</strong> The name of the benchmark. It will be in the format the FunctionName/value is passed in.</li>
<li><strong>Running Time</strong>: The time it took for our function to return a result.</li>
<li><strong>Iterations/sec</strong>: The number of times the function could be invoked in 1 second.</li>
<li><strong>Items/sec:</strong> The number of items that were processed in 1 second.</li>
</ol>
<p>While 2 and 3 will indicate the time complexity of the function, 4 will provide us with the space complexity.</p>
<h2 id="example-fibonacci-series">Example: Fibonacci Series</h2>
<p>The classic example to explain dynamic programming is the <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci computation</a> which can be formalised as follows</p>
<pre><code class="language-ini hljs">Fibonacci(n) = 0; if n = 0
Fibonacci(n) = 1; if n = 1
Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) ; if n &gt;=2
</code></pre>
<h3 id="naive-recursive-approach">Naive Recursive Approach</h3>
<p>The Fibonacci sequence can easily be solved by the following recursive method:</p>
<pre><code class="language-cpp hljs"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">return</span> Fibonacci(n - <span class="hljs-number">2</span>) + Fibonacci(n - <span class="hljs-number">1</span>);
}
</code></pre>
<p>On running the above code and profiling it on my machine, I get:</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciRecursive/10                 0 ms         2488889          17.0685M
FibonacciRecursive/20                 0 ms           21333          303.026k
FibonacciRecursive/30                 8 ms             179          3.60887k
FibonacciRecursive/40               997 ms               1                40
FibonacciRecursive/50            124510 ms               1           0.40282
</code></pre>
<p>Although this method returns almost instantly for <strong>n &lt;= 30</strong>, it takes a little less than a second for <strong>n = 40</strong> and approximately 2 minutes for <strong>n = 50</strong>. Why is the amount of running time increasing so rapidly? This can be explained easily by following the execution stack. Let's do this for <strong>n = 6</strong> to keep it simple. The following image shows the sequence of calls that are made.</p>
<p><img src="/assets/images/posts/dynamic-programming-series-introduction/cover.png" alt="Fibonacci Series"></p>
<p>Looking at the image, we can see that to calculate <em>fibonacci(6)</em>, we calculate</p>
<ul>
<li><em>fibonacci(5)</em> 1 time</li>
<li><em>fibonacci(4)</em> 2 times,</li>
<li><em>fibonacci(3)</em> 3 times,</li>
<li><em>fibonacci(2)</em> 5 times,</li>
<li><em>fibonacci(1)</em> 8 times; and</li>
<li><em>fibonacci(0)</em> 5 times.</li>
</ul>
<p>Throughout the call-stack, we are repeatedly computing values that we have already computed. This amount of duplicated work being done keeps on increasing as <em><strong>n</strong></em> becomes larger.</p>
<p>You must have realised that this solution is not at all scalable. If you are thinking that there has to be a better way, you are correct.</p>
<h3 id="top-down-recursive-approach-with-memoization">Top-Down Recursive approach with Memoization</h3>
<p>The 1st step to improving the above solution is to add memoization, i.e. to store the previously computed values in a data structure. Although you can use any data structure that you like, I will use a map for the purposes of this example.</p>
<pre><code class="language-cpp hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciMemonized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-keyword">long</span>&gt; computedValues;
    computedValues.insert(make_pair(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));
    computedValues.insert(make_pair(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));
    <span class="hljs-keyword">return</span> FibonacciMemonized(n, computedValues);
}

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciMemonized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-keyword">long</span>&gt;&amp; computedValues)</span>
</span>{
    <span class="hljs-keyword">if</span> (computedValues.find(n) != computedValues.end())
    {
        <span class="hljs-keyword">return</span> computedValues[n];
    }
    <span class="hljs-keyword">long</span> newValue = (FibonacciMemonized(n - <span class="hljs-number">1</span>, computedValues) + FibonacciMemonized(n - <span class="hljs-number">2</span>, computedValues)) % MOD;
    computedValues.insert(make_pair(n, newValue));
    <span class="hljs-keyword">return</span> newValue;
}
</code></pre>
<p>The top method is our main method. It adds the 2 base cases to a map and then calls the bottom method with the map as one of the arguments.</p>
<p>This bottom method is our recursive method. In this method, we check if the map contains the computed value. If it does, we just return that value. Otherwise, we calculate the value for <em><strong>n-1</strong></em> and <strong><em>n-2</em></strong>.</p>
<p>We mod the result using <strong>1000000007</strong> to avoid overflows. Before returning their sum, we store the value in our map.</p>
<p>How better is this version? Let's look at the benchmark results.</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciMemonized/1000               0 ms            4073          3.60284M
FibonacciMemonized/5000               2 ms             896          2.90891M
FibonacciMemonized/10000              3 ms             407          2.82288M
FibonacciMemonized/15000              5 ms             242          2.66937M
FibonacciMemonized/20000              7 ms             187          2.65432M
</code></pre>
<p>We can see that we have reduced the amount of time drastically. Even for <strong>n = 20000</strong>, the result is instantaneous.</p>
<p>However, there is a problem with this approach. Can you spot it?</p>
<p>If you said memory usage, you are absolutely correct. Although the new version is much faster, it is still a recursive algorithm.</p>
<p>And, the problem with recursive algorithms is that each recursive call takes some space on the stack. A high enough <strong>n</strong>, and we run the risk of running out of memory.</p>
<p>Let's see why this happens with an example where <strong>n = 100</strong>. Because we don't have the result when we start, we call the method recursively for 999, 998, 997 ... 1. At that point, we have all the computed results in our map.</p>
<p>As we return from our recursive functions, we just look up the value in the table and return it. So, even though we have reduced the number of recursive calls, we still make <strong>n</strong> recursive calls before getting our initial result. This can easily be seen by comparing the iteration/seconds between this and the previous algorithm.</p>
<p>Let's try something better.</p>
<h3 id="bottom-up-approach-with-dynamic-programming">Bottom-Up Approach with Dynamic Programming</h3>
<p>In the previous approach, our main problem was the recursive nature of our algorithm. Let's see if we can get rid of it by using an iterative approach.</p>
<p>How do we do this? Instead of starting from the final value, we will begin with the smallest value of <strong>n</strong> and build up the results.</p>
<pre><code class="language-cpp hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciDP</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">long</span>* results = <span class="hljs-keyword">new</span> <span class="hljs-keyword">long</span>[n + <span class="hljs-number">1</span>];
    results[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;
    results[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)
    {
        results[i] = (results[i - <span class="hljs-number">1</span>] + results[i - <span class="hljs-number">2</span>]) % MOD;
    }
    <span class="hljs-keyword">long</span> value = results[n];
    <span class="hljs-keyword">delete</span>[] results;
    <span class="hljs-keyword">return</span> value;
}
</code></pre>
<p>In the above function, we have an array of <strong>n+1</strong> to store the results. We initialise the array for our base cases of <strong>n=0</strong> and <strong>n=1</strong> and then iterate from <strong>2</strong> to <strong>n</strong>. At each step, we can use the 2 previously computed values and finally return the result.</p>
<p>Let's again look at the benchmark results to see how does this approach do?</p>
<pre><code class="language-ini hljs">-----------------------------------------------------------------------------
Benchmark Name                 Running Time   Iterations/sec        Items/sec
-----------------------------------------------------------------------------
FibonacciDP/100000                    1 ms            1906          130.711M
FibonacciDP/600000                    5 ms             280          111.456M
FibonacciDP/1100000                  10 ms             145          110.626M
FibonacciDP/1600000                  14 ms             100          112.249M
FibonacciDP/2100000                  18 ms              81          110.448M
</code></pre>
<p>Even when <strong>n=210,000</strong>, this approach returns almost instantly. At the same time, since this algorithm is not recursive in nature, we have drastically reduced the required amount of space. We can see this by comparing the items/sec, which decreases much slower even though <strong>n</strong> is increasing more rapidly than before.</p>
<p>You may be thinking that since we have a linear time and space complexity, this is the end.</p>
<p>In most cases, that would be true. But, in this case, we can optimise our solution further.</p>
<h3 id="bottom-up-approach-with-dynamic-programming-optimised">Bottom-Up Approach with Dynamic Programming (Optimised)</h3>
<p>In the last algorithm, the amount of space required is proportional to <strong>n</strong>. This is because we are storing all the results. But, we don't need to keep all of them.</p>
<p>Let's eliminate the array by using just 3 variables - 2 to store the previous results and 1 to store the current result.</p>
<pre><code class="language-cpp hljs">    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span>

<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">FibonacciDPOptimized</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span>
</span>{
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">long</span> n1 = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">long</span> n2 = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">long</span> current = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)
    {
        current = (n1 + n2) % MOD;
        n1 = n2;
        n2 = current;
    }
    <span class="hljs-keyword">return</span> current;
}
</code></pre>
<p>Although this algorithm is doing precisely the same thing as the previous one, we have reduced our space complexity to be constant since the amount of space needed is no longer dependent on <strong>n</strong>.</p>
<p>Again the benchmark results for comparison.</p>
<pre><code class="language-ini hljs">----------------------------------------------------------------------------------
Benchmark Name                    Running Time   Iterations/sec        Items/sec
----------------------------------------------------------------------------------
FibonacciDPOptimized/100000                0 ms            2987          202.569M
FibonacciDPOptimized/600000                3 ms             498          207.242M
FibonacciDPOptimized/1100000               5 ms             280          202.138M
FibonacciDPOptimized/1600000               7 ms             187          205.188M
FibonacciDPOptimized/2100000               10 ms            128          205.0708M
</code></pre>
<p>Here, we can see that although <strong>n</strong> is increasing, the items/sec is more or less the same.</p>
<p>This is the best we can do, and no further optimisations are possible.</p>
<h2 id="conclusion">Conclusion</h2>
<p>From the above example, we can see that we only need to identify overlapping subproblems and then avoid duplicated work by caching the computed results.</p>
<p>To recap, we can use these steps to find a dynamic programming approach to our problem.</p>
<ol>
<li>Find the overlapping subproblem.</li>
<li>Start with a recursive solution</li>
<li>Modify the recursive solution to use a top-down memoized version.</li>
<li>Remove the recursion by making it an iterative solution.</li>
<li>If you don't need to keep all the previous results, keep only the required ones.</li>
</ol>
<p>If you would like to run the code yourself, you can find the code <a href="https://github.com/AnkurSheel/DynamicProgramming">here</a>.</p>
<p>Hopefully, this article has removed the mystery around Dynamic Programming.</p>
<p>In the following few articles in the series, we will look at some of the more common problems that can be solved by Dynamic Programming and use the above steps to come up with a solution.</p>
<p>Have you tried Dynamic Programming before? How was your experience? Let me know.</p>
</body></html>



<aside class="hidden md:block mt-12">
        <div class="flex justify-center gap-x-5 ">
            <a class="bg-social-twitter social-button" href="https://twitter.com/intent/tweet?url=https://www.ankursheel.com/blog/dynamic-programming-series-introduction&text=In%20this%20article%2C%20I%20will%20show%20the%20advantages%20of%20using%20a%20Dynamic%20Programming%20approach.%20Using%20an%20example%2C%20we%20will%20come%20up%20with%20an%20approach%20to%20find%20a%20DP%20solution. via @ankur_sheel" target="_blank" rel="noopener noreferrer">Tweet this Article</a>
            <a class="bg-social-linkedin social-button" href="https://www.linkedin.com/sharing/share-offsite/?url=https://www.ankursheel.com/blog/dynamic-programming-series-introduction"target="_blank" rel="noopener noreferrer">Share on Linkedin</a>
        </div>
</aside>



        </article>
    </div>
</main>

<footer class="shadow-lg z-10 w-full bg-gray-500 text-white">
    
<div class="flex justify-between items-center max-w-6xl mx-auto px-4 py-3 mt-14">
    <div class="flex">
        <a class="mr-4" href="https://twitter.com/ankur_sheel" title="Connect on Twitter" target="_blank" rel="noopener noreferrer">
            <svg width="32" height="32" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M7.23336 4.69629C7.23336 2.96884 8.63335 1.56857 10.36 1.56857C11.3736 1.56857 12.183 2.04804 12.7254 2.74385C13.3079 2.62467 13.8557 2.40913 14.3513 2.11508C14.1559 2.72598 13.7424 3.2396 13.2033 3.56463C13.2038 3.56568 13.2042 3.56674 13.2047 3.56779C13.7334 3.50361 14.2364 3.36302 14.7048 3.15546L14.7037 3.15715C14.3667 3.66183 13.9431 4.10736 13.4561 4.47034C13.4823 4.64672 13.4956 4.82427 13.4956 5.00079C13.4956 8.6871 10.6873 12.9746 5.52122 12.9746C3.93906 12.9746 2.46544 12.511 1.22505 11.7152C0.992632 11.5661 0.925108 11.2568 1.07423 11.0244C1.0874 11.0038 1.10183 10.9846 1.11734 10.9666C1.20582 10.8202 1.37438 10.7309 1.5554 10.7522C2.47066 10.8601 3.38568 10.7485 4.19219 10.3962C3.39226 10.0434 2.77129 9.35975 2.50204 8.51974C2.45359 8.3686 2.48835 8.20311 2.59351 8.08422C2.59716 8.0801 2.60087 8.07606 2.60464 8.0721C1.96391 7.50819 1.55973 6.68208 1.55973 5.76143V5.72759C1.55973 5.56814 1.64411 5.42059 1.78155 5.33974C1.82671 5.31317 1.87537 5.29511 1.92532 5.28558C1.70549 4.86154 1.58116 4.37984 1.58116 3.86958C1.58116 3.40165 1.58384 2.81192 1.91332 2.28081C1.98718 2.16175 2.10758 2.08915 2.2364 2.07195C2.42588 2.01237 2.64087 2.06969 2.77406 2.23302C3.86536 3.57126 5.44066 4.49583 7.23366 4.73961L7.23336 4.69629ZM5.52122 11.9746C4.73387 11.9746 3.97781 11.8435 3.27248 11.6023C4.13012 11.4538 4.95307 11.1159 5.66218 10.5602C5.81211 10.4427 5.87182 10.2435 5.81126 10.0629C5.7507 9.88234 5.583 9.75943 5.39255 9.75607C4.68968 9.74366 4.06712 9.39716 3.67793 8.86845C3.86828 8.85306 4.05428 8.82039 4.23445 8.77167C4.43603 8.71716 4.57363 8.53114 4.56674 8.32243C4.55985 8.11372 4.41029 7.93718 4.20555 7.89607C3.42694 7.73977 2.79883 7.16764 2.56169 6.42174C2.76255 6.47025 2.97102 6.4991 3.18482 6.5061C3.38563 6.51267 3.56646 6.38533 3.62795 6.19405C3.68943 6.00277 3.61666 5.79391 3.44963 5.68224C2.86523 5.29155 2.48116 4.62464 2.48116 3.86958C2.48116 3.70213 2.48352 3.55268 2.49355 3.41719C3.85115 4.79913 5.70873 5.68931 7.77588 5.79338C7.93225 5.80126 8.08328 5.73543 8.18395 5.61553C8.28463 5.49562 8.32332 5.33548 8.28851 5.18284C8.25255 5.02517 8.23336 4.86284 8.23336 4.69629C8.23336 3.52085 9.18591 2.56857 10.36 2.56857C11.5943 2.56857 12.4956 3.71208 12.4956 5.00079C12.4956 8.25709 10.0202 11.9746 5.52122 11.9746Z" fill="currentColor"></path>
            </svg>
        </a>
        <a class="mr-4" href="https://www.linkedin.com/in/ankursheel" title="View my LinkedIn profile" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path d="M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z" fill="currentColor"></path>
            </svg>
        </a>

        <a class="mr-4" href="https://github.com/AnkurSheel" title="Check out my work on Github" target="_blank" rel="noopener noreferrer">
            <svg width="32" height="32" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M7.49936 0.850006C3.82767 0.850006 0.849976 3.8273 0.849976 7.50023C0.849976 10.4379 2.75523 12.9306 5.39775 13.8104C5.73047 13.8712 5.85171 13.6658 5.85171 13.4895C5.85171 13.3315 5.846 12.9135 5.84273 12.3587C3.99301 12.7604 3.60273 11.4671 3.60273 11.4671C3.30022 10.6988 2.86423 10.4942 2.86423 10.4942C2.26044 10.0819 2.90995 10.0901 2.90995 10.0901C3.57742 10.137 3.9285 10.7755 3.9285 10.7755C4.52167 11.7916 5.48512 11.4981 5.86396 11.3279C5.92438 10.8984 6.09625 10.6053 6.28608 10.4391C4.80948 10.2709 3.25695 9.70063 3.25695 7.15241C3.25695 6.42615 3.51618 5.83298 3.94157 5.368C3.87299 5.1998 3.64478 4.52375 4.00689 3.60807C4.00689 3.60807 4.56494 3.42926 5.83538 4.28941C6.36568 4.14204 6.93477 4.06856 7.50018 4.0657C8.06518 4.06856 8.63386 4.14204 9.16498 4.28941C10.4346 3.42926 10.9918 3.60807 10.9918 3.60807C11.3548 4.52375 11.1266 5.1998 11.0584 5.368C11.4846 5.83298 11.7418 6.42615 11.7418 7.15241C11.7418 9.70716 10.1868 10.2693 8.70571 10.4338C8.94412 10.6392 9.15681 11.045 9.15681 11.6655C9.15681 12.5542 9.14865 13.2715 9.14865 13.4895C9.14865 13.6675 9.26867 13.8745 9.60588 13.8095C12.2464 12.9282 14.15 10.4375 14.15 7.50023C14.15 3.8273 11.1723 0.850006 7.49936 0.850006Z" fill="currentColor"></path>
            </svg>
        </a>

        <a href="https://www.buymeacoffee.com/ankursheel" title="Buy Me A Coffee" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-coffee">
                <path d="M18 8h1a4 4 0 0 1 0 8h-1"></path><path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path><line x1="6" y1="1" x2="6" y2="4"></line><line x1="10" y1="1" x2="10" y2="4"></line><line x1="14" y1="1" x2="14" y2="4"></line>
            </svg>
        </a>
    </div>
    <div class="copy">
        © AnkurSheel 2021
    </div>
</div>

</footer>


<script src="/assets/js/blog.js"></script>
    <script data-goatcounter="https://ankursheel.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>



    <script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="ankursheel" data-description="Support me on Buy me a coffee!" data-message="Did you learn something or find this summary interesting? Buy me a coffee" data-color="#40DCA5" data-position="Right" data-x_margin="18" data-y_margin="18"></script>


</body>
</html>
