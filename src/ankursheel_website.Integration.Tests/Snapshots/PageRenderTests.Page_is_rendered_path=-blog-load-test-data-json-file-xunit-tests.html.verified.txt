
<!DOCTYPE html>
<html lang="en" class="min-h-screen">
<head>
    

<title>Ankur Sheel - How to load test data from a JSON file for xUnit tests</title>
<meta charset="utf-8"/>

<!-- Google Tag Manager -->

<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content="In this post, we add a custom attribute in xUnit to load test data from a JSON file."/>
<link href="/assets/styles.css" rel="stylesheet"/>
<link href="/assets/code-styles/obsidian.min.css" rel="stylesheet"/>
<link rel="canonical" href="https://www.ankursheel.com/blog/load-test-data-json-file-xunit-tests"/>

<meta itemProp="name" content="How to load test data from a JSON file for xUnit tests"/>
<meta itemProp="description" content="In this post, we add a custom attribute in xUnit to load test data from a JSON file."/>
    <meta itemProp="image" content="https://www.ankursheel.com/assets/images/social/load-test-data-json-file-xunit-tests-facebook.png"/>
<meta property="og:url" content="https://www.ankursheel.com/blog/load-test-data-json-file-xunit-tests"/>
<meta property="og:type" content="article"/>
<meta property="og:title" content="How to load test data from a JSON file for xUnit tests"/>
<meta property="og:description" content="In this post, we add a custom attribute in xUnit to load test data from a JSON file."/>
    <meta property="og:image" content="https://www.ankursheel.com/assets/images/social/load-test-data-json-file-xunit-tests-facebook.png"/>
    <meta property="og:image:secure_url" content="https://www.ankursheel.com/assets/images/social/load-test-data-json-file-xunit-tests-facebook.png"/>
<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:site" content="ankur_sheel"/>
<meta name="twitter:creator" content="ankur_sheel"/>
<meta name="twitter:title" content="How to load test data from a JSON file for xUnit tests"/>
<meta name="twitter:description" content="In this post, we add a custom attribute in xUnit to load test data from a JSON file."/>
    <meta name="twitter:image" content="https://www.ankursheel.com/assets/images/social/load-test-data-json-file-xunit-tests-twitter.png"/>
    <meta name="twitter:image:secure_url" content="https://www.ankursheel.com/assets/images/social/load-test-data-json-file-xunit-tests-twitter.png"/>

</head>
<body class="font-sans font-normal leading-relaxed font-base text-gray-800 min-h-screen bg-gray-100">
<header class="sticky top-0 bg-white shadow-lg z-10">
    

<!-- https://www.section.io/engineering-education/creating-a-responsive-navigation-bar-using-tailwind-css-and-javascript/ -->

<nav>
    <div class="max-w-6xl mx-auto px-4">
        <div class="flex justify-between">
            <div class="flex space-x-7 items-center">
                <!-- Website Logo -->
                <div>
                    <a href="/" class="flex items-center py-4 px-2 ">
                        <span class="font-semibold text-gray-500 text-lg hover:text-green-500">
                            Ankur Sheel
                        </span
                        >
                    </a>
                </div>
                <ul class="hidden lg:flex items-center space-x-1">
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/about">About</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/blog">All Posts</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/tags">All Tags</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/contact">Contact</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/cv">CV</a>
                        </li>
                        <li class="py-4 px-2 text-gray-500 font-semibold hover:text-green-500 transition-all transform hover:scale-110">
                            <a href="/impossible-list">Impossible List</a>
                        </li>
                </ul>
            </div>

            <ul class="hidden lg:flex items-center space-x-3">
                <li>
                    <a role="button" class="" target="_blank" rel="noopener noreferrer" href="/rss.xml" title="RSS">
                        <img class="h-8 mr-2 border-none" src="/assets/images/rss.svg" alt="RSS">
                    </a>
                </li>
                <li>
                    <a role="button" class="inline-flex items-center bg-green-400 text-white p-2 rounded-md text-2xl drop-shadow-lg hover:bg-green-800" target="_blank" rel="noopener noreferrer" href="https://www.buymeacoffee.com/ankursheel" title="Did you learn something or find this summary interesting?">
                        <img class="h-8 mr-2 border-none" src="/assets/images/bmc-logo.svg" alt="Buy Me A Coffee">
                        <p class="font-cookie">Buy me a book</p>
                    </a>
                </li>
            </ul>

            <div class="lg:hidden flex items-center">
                <button class="outline-none mobile-menu-button" aria-label="Mobile Menu">
                    <svg class="h-6 w-6 fill-current" viewBox="0 0 24 24">
                        <path fill-rule="evenodd"
                              d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"/>
                    </svg>
                </button>
            </div>

        </div>
        <div class="hidden mobile-menu">
            <ul class="flex flex-col">
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/about" class="block">About</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/blog" class="block">All Posts</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/tags" class="block">All Tags</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/contact" class="block">Contact</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/cv" class="block">CV</a>
                    </li>
                    <li class="text-sm px-2 py-4 hover:bg-green-500 transition duration-300">
                        <a href="/impossible-list" class="block">Impossible List</a>
                    </li>
            </ul>
        </div>
    </div>
</nav>

</header>
<main class="mx-auto max-w-prose p-8 prose prose-xl prose-purple">
    <h1 class="text-center">How to load test data from a JSON file for xUnit tests</h1>
    <div class="flex flex-col min-h-screen">
        <article>
            
<div class="prose-sm italic ">
    <div class="flex justify-evenly items-center">
        <i>Last Updated On: 20-Feb-2019</i>
        <i class="font-bold">
            Reading Time: 3 min
        </i>
    </div>

    <div class="flex flex-row flex-wrap gap-1 place-content-center">
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/csharp" class="badge text-black bg-grey-light no-underline">csharp</a>
            </div>
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/testing" class="badge text-black bg-grey-light no-underline">testing</a>
            </div>
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/tutorial" class="badge text-black bg-grey-light no-underline">tutorial</a>
            </div>
            <div class="flex-initial border-2 border-black p-2 m-2 border rounded-xl">
                <a role="button" href="/tags/xunit" class="badge text-black bg-grey-light no-underline">xUnit</a>
            </div>
    </div>
</div>

<html><head></head><body><h2 id="xunit-101">xUnit 101</h2>
<p>xUnit is a unit testing tool for the .Net framework. If you're new to testing with xUnit, I suggest reading the getting started <a href="https://xunit.net/docs/getting-started/netcore/visual-studio">documentation</a>.</p>
<p>xUnit allows support for both parameterless and parameterized tests. There are 3 different ways to supply data to the parameterized tests.</p>
<ul>
<li><strong>Inline Data</strong> is good when the method parameters are constant. Still, it gets unwieldy pretty quickly when you have many test cases. It also can't be used when the data is not constant.</li>
<li><strong>Class Data</strong> removes clutter from test files by moving the data to a separate class. It also allows you to pass non-constant data to the test. The downside is that you have to create a new class.</li>
<li><strong>Member Data</strong> is similar to class data but uses a static property or method of a type instead of a <em>class</em>.</li>
</ul>
<h2 id="problems">Problems</h2>
<p>All 3 of the above approaches have a shortcoming in that every time you want to add new data to test, you need a recompile. The classes/methods can also become quite large if you have a lot of data. For example, <a href="https://github.com/AnkurSheel/AdventOfCode2018/blob/84f0174ce6d35bef70e45b1713d2e23272dc5a29/AdventOfCode2018.Tests/Day1/testData.json#L37-L1054">this</a> is the sample input for the puzzle in the <a href="https://adventofcode.com/2018">Advent Of Code 2018</a>.</p>
<h2 id="first-pass">First Pass</h2>
<p>Both these problems would just go away if we could load our test data from a file. Andrew Lock has a great <a href="https://andrewlock.net/creating-a-custom-xunit-theory-test-dataattribute-to-load-data-from-json-files/">article</a> which shows how to create a custom attribute to load the data from a JSON file.</p>
<p>Since this article leans heavily on his approach, I recommend reading that first.Go on, I will wait.</p>
<p>Oh, Good, you are back. So you might be wondering that if Andrew has already written the article, why am I writing this? More importantly, why should you spend your precious time reading this?</p>
<p>Well. I found his solution to work very well for test cases with a small number of parameters. However, it becomes quite cumbersome to use with a large set of parameters.</p>
<p>For the Advent of Code test input, we would have to have a lot of parameters. We could reduce the number of parameters required to just one as it's just a single(albeit large) list of the same type. However, I could not figure out how to structure my JSON so that it could be parsed easily.</p>
<h2 id="improvements">Improvements</h2>
<p>Let us start by creating a new generic class that takes 2 different underlying types - 1 for the Data and 1 for the Result class. This class will be used to deserialize the JSON data.</p>
<pre><code class="language-csharp hljs">class TestObject&lt;T1, T2&gt;
{
    public List&lt;T1&gt; Data { get; set; }

    public T2 Result { get; set; }
}
</code></pre>
<p>Now, let's modify our attribute class. <em>For brevity, I am just showing the relevant code here. For the whole file, please see <a href="https://github.com/AnkurSheel/xUnitHelpers/blob/master/xUnitHelpers/JsonFileDataAttribute.cs">here</a></em>.</p>
<pre><code class="language-csharp hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JsonFileDataAttribute</span> : <span class="hljs-title">DataAttribute</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> IEnumerable&lt;<span class="hljs-keyword">object</span>[]&gt; GetData(MethodInfo testMethod)
    {
        <span class="hljs-comment">// fileData is the raw file data</span>
        <span class="hljs-comment">// _dataType and _resultType are set in the constructor and are the types for the input data and the result</span>

        <span class="hljs-keyword">var</span> specific = <span class="hljs-keyword">typeof</span>(TestObject&lt;,&gt;).MakeGenericType(_dataType, _resultType);
        <span class="hljs-keyword">var</span> generic = <span class="hljs-keyword">typeof</span>(List&lt;&gt;).MakeGenericType(specific);

        <span class="hljs-keyword">var</span> jsonData = JObject.Parse(fileData);
        <span class="hljs-keyword">dynamic</span> datalist = JsonConvert.DeserializeObject(jsonData, generic);
        <span class="hljs-keyword">var</span> objectList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-keyword">object</span>[]&gt;();
        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> data <span class="hljs-keyword">in</span> datalist)
        {
            objectList.Add(<span class="hljs-keyword">new</span> <span class="hljs-keyword">object</span>[] {data.Data, data.Result});
        }
        <span class="hljs-keyword">return</span> objectList;
    }
}
</code></pre>
<p>So what exactly are we doing here?</p>
<ol>
<li>Use <em><a href="https://docs.microsoft.com/en-us/dotnet/api/system.type.makegenerictype?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(System.Type.MakeGenericType);k(DevLang-csharp)%26rd%3Dtrue&amp;view=netframework-4.7.2">MakeGenericType</a></em> to get the Type of <em>TestObject</em> by substituting the generic type parameters by the actual parameters specified in the test.</li>
<li>Use <em>MakeGenericType</em> again to get a new type which is a <em>List</em> of the new constructed <em>TestObject</em></li>
<li>Parse the file data as JSON</li>
<li>Deserialize the JSON data as the <em>genericType</em> and store it in a <em><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/dynamic?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(dynamic_CSharpKeyword)%3Bk(DevLang-csharp)%26rd%3Dtrue">dynamic</a></em> type. We need to use dynamic here as we don't know the types passed into <em>TestObject</em> at compile-time, and they can change for each test.</li>
<li>Add all the data into a list of objects and return it</li>
</ol>
<p>This allows us to write our tests in the following manner.</p>
<pre><code class="language-csharp hljs">[Theory]
[JsonFileData(<span class="hljs-string">"testData.json"</span>, <span class="hljs-string">"Part1"</span>, <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">string</span>), <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">int</span>))]
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>(<span class="hljs-params">List&lt;<span class="hljs-keyword">string</span>&gt; data, <span class="hljs-keyword">int</span> expectedResult</span>)
</span>{
    <span class="hljs-keyword">var</span> result = TestThisMethod(data);
    Assert.Equal(expectedResult, result);
}
</code></pre>
<h2 id="github-repository">Github Repository</h2>
<p>You can see the code <a href="https://github.com/AnkurSheel/xUnitHelpers">here</a>.</p>
<h2 id="nuget-package">Nuget package</h2>
<p><a href="https://www.nuget.org/packages/Codinators.XunitHelpers/">Codinators.XunitHelpers</a> is a reusable Nuget Package that you can use in your projects.</p>
<p>Install it by using the following command</p>
<pre><code class="language-bash hljs">dotnet add package Codinators.XunitHelpers
</code></pre>
<h2 id="references">References</h2>
<ul>
<li><a href="https://xunit.net/docs/getting-started/netcore/visual-studio">xUnit documentation</a></li>
<li><a href="https://adventofcode.com/">Advent of Code</a></li>
<li><a href="https://andrewlock.net/creating-a-custom-xunit-theory-test-dataattribute-to-load-data-from-json-files/">Creating a custom xUnit theory test DataAttribute to load data from JSON files</a> by Andrew Lock</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.type.makegenerictype?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(System.Type.MakeGenericType);k(DevLang-csharp)%26rd%3Dtrue&amp;view=netframework-4.7.2">MakeGenericType</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/dynamic?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(dynamic_CSharpKeyword)%3Bk(DevLang-csharp)%26rd%3Dtrue">dynamic</a></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>In this post, we built upon Andrew's basic implementation of a custom JSON data source to make it easier for us to work with larger sets of data as well are more complex data.</p>
</body></html>



<aside class="hidden md:block">
        <div class="flex justify-center gap-x-5 ">
            <a class="bg-social-twitter social-button" href="https://twitter.com/intent/tweet?url=https://www.ankursheel.com/blog/load-test-data-json-file-xunit-tests&text=In%20this%20post%2C%20we%20add%20a%20custom%20attribute%20in%20xUnit%20to%20load%20test%20data%20from%20a%20JSON%20file. via @ankur_sheel" target="_blank" rel="noopener noreferrer">Tweet this Article</a>
            <a class="bg-social-linkedin social-button" href="https://www.linkedin.com/sharing/share-offsite/?url=https://www.ankursheel.com/blog/load-test-data-json-file-xunit-tests"target="_blank" rel="noopener noreferrer">Share on Linkedin</a>
        </div>
</aside>



        </article>
    </div>
</main>


<script src="/assets/js/blog.js"></script>
    <script data-goatcounter="https://ankursheel.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>



    <script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="ankursheel" data-description="Support me on Buy me a coffee!" data-message="Did you learn something or find this summary interesting? Buy me a coffee" data-color="#40DCA5" data-position="Right" data-x_margin="18" data-y_margin="18"></script>


</body>
</html>
